<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>＠property 、 ＠synthesize 与 ＠dynamic 的作用</title>
    <url>/2016/08/09/@property_@synthesize_@dynamic/</url>
    <content><![CDATA[<ul>
<li><strong>@property</strong>: 用于声明成员变量的 getter/setter 方法</li>
<li><strong>@synthesize</strong>: 与 @property 配套使用，@synthesize 会自动生成一个<code>_</code>开头的成员变量（若是不指定的话），并实现 @property 声明的 getter/setter 方法。</li>
<li><strong>@dynamic</strong>: 不会自动生成成员变量，程序员需自己添加成员变量并实现 getter/setter 方法。    </li>
</ul>
<a id="more"></a>

<p>** 具体细节详见以下代码：**</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//  3.1 由于 @dynamic 并不会自动生成成员变量，因此需自主添加成员变量用于 getter/setter 方法，否则会报 “Use undeclared identifier” 错误。</span></span><br><span class="line">    <span class="built_in">NSInteger</span> _weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  1. @property 的简单使用</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> height;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> weight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JQPerson</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  2. @synthesize 的使用</span></span><br><span class="line"><span class="comment">//  2.1 默认生成"_"开头的成员变量， 即：</span></span><br><span class="line"><span class="keyword">@synthesize</span> name = _name;</span><br><span class="line"><span class="comment">//  2.2 生成与 @property 相同的不带下划线的成员变量：</span></span><br><span class="line"><span class="keyword">@synthesize</span> age;</span><br><span class="line"><span class="comment">//  2.3 指定生成的成员变量名：</span></span><br><span class="line"><span class="keyword">@synthesize</span> height = H;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  3. @dynamic 的使用</span></span><br><span class="line"><span class="keyword">@dynamic</span> weight;</span><br><span class="line"><span class="comment">//  3.2 实现 getter/setter 方法（这里只是简单的实现）：</span></span><br><span class="line">- (<span class="keyword">void</span>)setWeight:(<span class="built_in">NSInteger</span>)weight &#123;</span><br><span class="line">    _weight = weight;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)weight &#123;</span><br><span class="line">    <span class="keyword">return</span> _weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong><em>（Tips：在都没有使用 @synthesize 以及 @dynamic 时，默认为 <code>@synthesize propertyName = _propertyName;</code>。但若是同时实现了 getter&amp;setter 方法，则隐含表示为 <code>@dynamic propertyName;</code> 因此编译器并不会自动生成成员变量，此时若是使用成员变量则会出现 “Use undeclared identifier” 错误。解决方法可以在类的声明中自主添加私有的成员变量，或者使用 @synthesize，告知编译器自动生成成员变量。）</em></strong></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>＠property</tag>
        <tag>＠synthesize</tag>
        <tag>＠dynamic</tag>
      </tags>
  </entry>
  <entry>
    <title>Alcatraz 的安装与使用</title>
    <url>/2016/04/22/Alcatraz/</url>
    <content><![CDATA[<h3 id="什么是-Alcatraz-？"><a href="#什么是-Alcatraz-？" class="headerlink" title="什么是 Alcatraz ？"></a>什么是 Alcatraz ？</h3><blockquote>
<p>Alcatraz is an open-source package manager for Xcode 7+. It lets you discover and install plugins, templates and color schemes without the need for manually cloning or copying files. It installs itself as a part of Xcode and it feels like home.<br><a href="https://github.com/alcatraz/Alcatraz" target="_blank" rel="noopener">Alcatraz</a> 是一款在 Xcode 7+ 以上用于管理开源包的工具。它可以帮你查找或安装 Xcode 插件、模板、颜色主题，不需要认为的克隆或拷贝文件，它就像是 Xcode 的一部分。</p>
</blockquote>
<a id="more"></a>

<p><strong>（注：Alcatraz 要求 Xcode 版本号为 7 以上）</strong></p>
<h3 id="Alcatraz-的安装"><a href="#Alcatraz-的安装" class="headerlink" title="Alcatraz 的安装"></a>Alcatraz 的安装</h3><ul>
<li>打开终端，在终端中输入：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://raw.github.com/alcatraz/Alcatraz/master/Scripts/install.sh | sh</span><br></pre></td></tr></table></figure></li>
<li>安装成功后显示如下，并重启 Xcode<br><img src="http://ww3.sinaimg.cn/large/006tNc79gw1f784eek7d0j30iy0dajue.jpg" alt="安装"></li>
<li>重启Xcode会提示你是否加载 Bundle，选择 <strong><em>Load Bundle</em></strong></li>
<li>按 <code>shift + command + 9</code> 或者 <code>Windows --&gt; Package Manager</code> ，便可打开 Alcatraz 的图形界面</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784ewdyxmj30i90hvq4y.jpg" alt="图形界面"></p>
<h3 id="Alcatraz-的卸载"><a href="#Alcatraz-的卸载" class="headerlink" title="Alcatraz 的卸载"></a>Alcatraz 的卸载</h3><ul>
<li>打开终端，在终端中输入：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Alcatraz-的使用"><a href="#Alcatraz-的使用" class="headerlink" title="Alcatraz 的使用"></a>Alcatraz 的使用</h3><ul>
<li>输入想要使用的插件，以 <code>KSImagedNamed</code> 为例，点击 <strong>INSTALL</strong> 便可安装<br><img src="http://ww4.sinaimg.cn/large/006tNc79gw1f784f87k07j30i90j3dh7.jpg" alt="install"></li>
<li>在项目中输入 <code>[UIImage imageNamed:]</code> 验证：<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784fo10mej30cj04kwfe.jpg" alt="KSImagedNamed"></li>
<li>Alcatraz 安装的插件都会下载到 <code>~/Library/Application Support/Alcatraz/Plug-ins</code> 文件夹下<br><img src="http://ww1.sinaimg.cn/large/006tNc79gw1f784g01elmj305k0313yn.jpg" alt="插件"></li>
<li>因此若要删除不使用的插件，可直接在该文件夹下删除，或者在图形界面点击 <strong>REMOVE</strong> ，删除所有插件：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf ~/Library/Application\ Support/Alcatraz/</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>Alcatraz</category>
      </categories>
      <tags>
        <tag>Alcatraz</tag>
      </tags>
  </entry>
  <entry>
    <title>让 NS&amp;UICollectionView 对齐</title>
    <url>/2021/05/20/JQCollectionViewAlignLayout/</url>
    <content><![CDATA[<h1 id="JQCollectionViewAlignLayout"><a href="#JQCollectionViewAlignLayout" class="headerlink" title="JQCollectionViewAlignLayout"></a>JQCollectionViewAlignLayout</h1><p>一个基于流式布局 (flow layout) 的自定义布局对象。支持设置 <code>NS&amp;UICollectionView</code> 水平及竖直方向的对齐方式，以及从右到左及从左到右的排列顺序。</p>
<a id="more"></a>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>可以通过 <code>git clone</code> 仓库，并在 <code>Examples</code> 文件夹下执行 <code>pod install</code>，然后用 Xcode 打开 <code>JQCollectionViewAlignLayout.xcworkspace</code> 并选择下列中的一个 scheme 运行对应的示例项目。</p>
<p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/schemes.png?raw=true" alt=""></p>
<h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-ios.png?raw=true" alt=""></p>
<h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-osx.png?raw=true" alt=""></p>
<h3 id="tvOS"><a href="#tvOS" class="headerlink" title="tvOS"></a>tvOS</h3><p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/eg-tvos.png?raw=true" alt=""></p>
<h2 id="对齐方式及排列方向"><a href="#对齐方式及排列方向" class="headerlink" title="对齐方式及排列方向"></a>对齐方式及排列方向</h2><table>
<thead>
<tr>
<th align="center">水平方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认流式<br />(<code>JQCollectionViewItemsHorizontalAlignmentFlow</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-flow.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">居左<br />(<code>JQCollectionViewItemsHorizontalAlignmentLeft</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-left.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">居中<br />(<code>JQCollectionViewItemsHorizontalAlignmentCenter</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-center.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">居右<br />(<code>JQCollectionViewItemsHorizontalAlignmentRight</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-right.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">平铺填充<br />(<code>JQCollectionViewItemsHorizontalAlignmentFlowFilled</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/h-flowfilled.png?raw=true" alt=""></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">竖直方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认居中<br />(<code>JQCollectionViewItemsVerticalAlignmentCenter</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-center.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">顶部对齐<br />(<code>JQCollectionViewItemsVerticalAlignmentTop</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-top.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">底部对齐<br />(<code>JQCollectionViewItemsVerticalAlignmentBottom</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/v-bottom.png?raw=true" alt=""></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">排列方向</th>
<th align="center">示例图片</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认从左到右<br />(<code>JQCollectionViewItemsDirectionLTR</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/d-ltr.png?raw=true" alt=""></td>
</tr>
<tr>
<td align="center">从右到左<br />(<code>JQCollectionViewItemsDirectionRTL</code>)</td>
<td align="center"><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/d-rtl.png?raw=true" alt=""></td>
</tr>
</tbody></table>
<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>iOS 6.0 +</p>
<p>macOS 10.11 +</p>
<p>tvOS 9.0 +</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>JQCollectionViewAlignLayout</code> 可以通过 <a href="http://cocoapods.org" target="_blank" rel="noopener">CocoaPods</a> 安装，只需在你的 Podfile 里加上下面这行：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'JQCollectionViewAlignLayout'</span></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="第一步：使用-JQCollectionViewAlignLayout-初始化-collection-view"><a href="#第一步：使用-JQCollectionViewAlignLayout-初始化-collection-view" class="headerlink" title="第一步：使用 JQCollectionViewAlignLayout 初始化 collection view"></a>第一步：使用 <code>JQCollectionViewAlignLayout</code> 初始化 collection view</h4><ul>
<li>可以像下面通过代码的方式:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; UICollectionView</span><br><span class="line">JQCollectionViewAlignLayout *layout &#x3D; [[JQCollectionViewAlignLayout alloc] init];</span><br><span class="line">UICollectionView *collectionView &#x3D; [[UICollectionView alloc] initWithFrame:self.view.bounds collectionViewLayout:layout];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; NSCollectionView</span><br><span class="line">JQCollectionViewAlignLayout *layout &#x3D; [[JQCollectionViewAlignLayout alloc] init];</span><br><span class="line">NSCollectionView *collectionView &#x3D; ...;</span><br><span class="line">collectionView.layout &#x3D; layout;</span><br></pre></td></tr></table></figure>
<ul>
<li>也可以像下面通过在 Interface Builder 中设置:</li>
</ul>
<p><img src="https://github.com/Coder-ZJQ/JQCollectionViewAlignLayout/blob/master/images/ib-setup.png?raw=true" alt=""></p>
<h4 id="第二步：设置对齐方式及排列方向"><a href="#第二步：设置对齐方式及排列方向" class="headerlink" title="第二步：设置对齐方式及排列方向"></a>第二步：设置对齐方式及排列方向</h4><ul>
<li>可以像下面通过 property 为所有 section 设置:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">layout.itemsHorizontalAlignment &#x3D; JQCollectionViewItemsHorizontalAlignmentLeft;</span><br><span class="line">layout.itemsVerticalAlignment &#x3D; JQCollectionViewItemsVerticalAlignmentCenter;</span><br><span class="line">layout.itemsDirection &#x3D; JQCollectionViewItemsDirectionLTR;</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以像下面通过 protocol 为每个 section设置:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 遵循 JQCollectionViewAlignLayoutDelegate 协议</span><br><span class="line">@interface JQViewController () &lt; UICollectionViewDataSource, JQCollectionViewAlignLayoutDelegate&gt;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation JQViewController</span><br><span class="line">&#x2F;&#x2F; 2. 实现对应协议方法</span><br><span class="line">- (JQCollectionViewItemsHorizontalAlignment)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsHorizontalAlignmentInSection:(NSInteger)section &#123;</span><br><span class="line">  &#x2F;&#x2F; 返回 JQCollectionViewItemsHorizontalAlignment 枚举以设置水平对齐方式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (JQCollectionViewItemsVerticalAlignment)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsVerticalAlignmentInSection:(NSInteger)section &#123;</span><br><span class="line">  &#x2F;&#x2F; 返回 JQCollectionViewItemsVerticalAlignment 枚举以设置竖直对齐方式</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (JQCollectionViewItemsDirection)collectionView:(UICollectionView *)collectionView layout:(JQCollectionViewAlignLayout *)layout itemsDirectionInSection:(NSInteger)section &#123;</span><br><span class="line">  &#x2F;&#x2F; 返回 JQCollectionViewItemsDirection 枚举以设置排列方向</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p><em>(剩下的使用与 <code>NS&amp;UICollectionViewFlowLayout</code> 一致，也可打开<a href="./Examples">示例项目</a>查看更多细节)</em></p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>coder-zjq, <a href="mailto:zjq_joker@163.com">zjq_joker@163.com</a></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>JQCollectionViewAlignLayout 遵循 MIT 协议，可以查看 LICENSE 文件获取更多信息。</p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>UICollectionView</tag>
        <tag>NSCollectionView</tag>
      </tags>
  </entry>
  <entry>
    <title>LLDB — 让调试更有趣</title>
    <url>/2016/08/19/LLDB/</url>
    <content><![CDATA[<h3 id="什么是-LLDB？"><a href="#什么是-LLDB？" class="headerlink" title="什么是 LLDB？"></a>什么是 <a href="http://lldb.llvm.org" target="_blank" rel="noopener">LLDB</a>？</h3><ul>
<li>LLDB 是一个有着 REPL（交互式）的特性和 C++ ，Python 插件的开源调试器；</li>
<li>LLDB 是 Xcode 中默认的调试器，支持在桌面、iOS 设备以及 iOS 模拟器上调试以 C 语言、Objective-C 或者 C ++ 编写的程序；</li>
<li>LLDB 允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。</li>
</ul>
<a id="more"></a>

<hr>
<h3 id="LLDB-简单使用"><a href="#LLDB-简单使用" class="headerlink" title="LLDB 简单使用"></a>LLDB 简单使用</h3><p>在此之前你可能已经使用过 LLDB ，也许只是在 Xcode 的界面上加一些断点，查看一些变量的值。但是通过一些小的技巧，你就可以做一些非常酷的事情。</p>
<h4 id="help-—-指令帮助"><a href="#help-—-指令帮助" class="headerlink" title="help — 指令帮助"></a><em>help</em> — 指令帮助</h4><p><code>help</code> 是最简单的指令，输入 <code>help</code>便会为你列举所有的命令。同时，如果你忘记一条指令的作用或者想要知道更多，你便可以输入 <code>help &lt;command&gt;</code> 其中 <code>&lt;command&gt;</code> 为你想要了解的指令，例如： <code>help print</code>。</p>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypwim8rpj20ex0693zy.jpg" alt="help"></p>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypwwtyzbj20eo01lq3c.jpg" alt="help print"></p>
<h4 id="p-amp-po-—-打印变量或者对象"><a href="#p-amp-po-—-打印变量或者对象" class="headerlink" title="p &amp; po — 打印变量或者对象"></a><em>p</em> &amp; <em>po</em> — 打印变量或者对象</h4><p>因为 LLDB 支持前缀匹配，因此你可以将 <code>print</code> 简写为 <code>p</code> 或者 <code>pri</code> ，而 <code>print</code> 则代表 <code>expression --</code> ；<code>po</code> 则代表 <code>expression -O --</code> ，意为 print object ，打印对象。<br>输入 <code>p</code> 指令可打印其对象类型、内存地址以及该对象的值等具体信息，而 <code>po</code> 指令则是打印其调用 <code>description</code> 方法得到的值。</p>
<p><em>(注：打印集合类型对象时，<code>p</code>指令会省略具体的值，只提示集合的数量等信息，因此若需查看集合中的值应使用 <code>po</code>指令，如下图所示：)</em>   </p>
<h5 id="打印-NSString"><a href="#打印-NSString" class="headerlink" title="打印 NSString :"></a>打印 NSString :</h5><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6ypyaz7pzj20b801i74i.jpg" alt="p &amp; po NSString"></p>
<h5 id="打印-NSDictionary"><a href="#打印-NSDictionary" class="headerlink" title="打印 NSDictionary :"></a>打印 NSDictionary :</h5><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypyjfpuzj20bk02oq37.jpg" alt="p &amp; po NSDictionary"></p>
<h5 id="打印-Person"><a href="#打印-Person" class="headerlink" title="打印 Person :"></a>打印 Person :</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - 自定义Person类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">/** 名字 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">/** 年龄 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line"><span class="comment">/** 重写description方法 */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)description&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"name:%@,age:%ld"</span>, <span class="keyword">self</span>.name, <span class="keyword">self</span>.age];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark - main函数</span></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        Person *p = [[Person alloc] init];</span><br><span class="line">        p.name = <span class="string">@"Joker"</span>;</span><br><span class="line">        p.age = <span class="number">23</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypytojm9j207301kt8u.jpg" alt="p &amp; po Person"></p>
<h5 id="指定格式打印："><a href="#指定格式打印：" class="headerlink" title="指定格式打印："></a>指定格式打印：</h5><ul>
<li>以二进制打印<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;t 23</span><br><span class="line">(int) $0 &#x3D; 0b00000000000000000000000000010111</span><br></pre></td></tr></table></figure></li>
<li>以八进制打印<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;o 23</span><br><span class="line">(int) $1 &#x3D; 027</span><br></pre></td></tr></table></figure></li>
<li>以十六进制打印<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;x 23</span><br><span class="line">(int) $2 &#x3D; 0x00000017</span><br></pre></td></tr></table></figure></li>
<li>以二进制打印，且只打印一个字节即八位(char类型只占据一个字节的内存)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(lldb) p&#x2F;t (char)23</span><br><span class="line">(char) $3 &#x3D; 0b00010111</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h4 id="expression-—-改变值"><a href="#expression-—-改变值" class="headerlink" title="expression — 改变值"></a><em>expression</em> — 改变值</h4><p>如果你想在调试的时候改变一个已有的值，那么你可以使用<code>expression</code>指令，也可以简写为<code>e</code></p>
<ul>
<li><p>在打印前添加断点：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yr04sauoj209202qq35.jpg" alt="添加断点"></p>
</li>
<li><p>利用LLDB查看并修改已经定义的值：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yqzvlh51j20cr030aal.jpg" alt="查看并修改"></p>
</li>
<li><p>继续运行查看打印结果<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yqzo0t8wj20bx00sjrk.jpg" alt="查看打印"></p>
</li>
</ul>
<p>可以看到之前定义的值通过LLDB已经成功被修改了。</p>
<hr>
<h3 id="LLDB更新UI"><a href="#LLDB更新UI" class="headerlink" title="LLDB更新UI"></a>LLDB更新UI</h3><p>既然LLDB可以修改已定义的值，那么LLDB能否在调试时修改UI中各类控件属性，以实现在不重新运行程序的情况下，更新UI查看效果？接下来进行验证：</p>
<ul>
<li><p>新建一个iOS项目，运行并断点，查看当前界面效果<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqzfn33qj20c00ji3yw.jpg" alt="原始界面"></p>
</li>
<li><p>LLDB中改变控制器view背景<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqz6tqduj20bg01idg5.jpg" alt="LLDB更新UI"></p>
</li>
<li><p>界面已经更新，变为绿色<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yqyvmxt6j20c00ji3yz.jpg" alt="改变界面"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Debug</category>
        <category>LLDB</category>
      </categories>
      <tags>
        <tag>LLDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MJExtension 的使用</title>
    <url>/2016/09/06/MJExtension/</url>
    <content><![CDATA[<h3 id="Define-the-models"><a href="#Define-the-models" class="headerlink" title="Define the models"></a>Define the models</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define JQPerson model</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">JQChild</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, JQSex) &#123;</span><br><span class="line">    JQSexMale = <span class="number">0</span>,</span><br><span class="line">    JQSexFemale,</span><br><span class="line">    JQSexUnknown</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) JQChild *child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define JQChild model</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQChild</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="JSON-gt-Model-mj-objectWithKeyValues"><a href="#JSON-gt-Model-mj-objectWithKeyValues" class="headerlink" title="JSON -&gt; Model: + mj_objectWithKeyValues"></a>JSON -&gt; Model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define a JSON dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</span><br><span class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjq"</span>,</span><br><span class="line">                                 <span class="string">@"age"</span>:@(<span class="number">24</span>),</span><br><span class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</span><br><span class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</span><br><span class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"false"</span></span><br><span class="line">                                 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; JQPerson</span></span><br><span class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d."</span>, person.name, person.age, person.sex, person.address, person.marriage);</span><br><span class="line"><span class="comment">// name:zjq, age:24, sex:0, address:FuZhou, marriage:0.</span></span><br></pre></td></tr></table></figure>
<h3 id="JSONString-gt-Model-mj-objectWithKeyValues"><a href="#JSONString-gt-Model-mj-objectWithKeyValues" class="headerlink" title="JSONString -&gt; Model: + mj_objectWithKeyValues"></a>JSONString -&gt; Model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define a JSON string</span></span><br><span class="line"><span class="built_in">NSString</span> *personStr = <span class="string">@"&#123;\"name\":\"zjq\", \"age\":24, \"sex\":0, \"address\":\"FuZhou\", \"marriage\":\"false\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSONString -&gt; Model</span></span><br><span class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Print   </span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d."</span>, person.name, person.age, person.sex, person.address, person.marriage);</span><br><span class="line"><span class="comment">// name:zjq, age:24, sex:0, address:FuZhou, marriage:0.</span></span><br></pre></td></tr></table></figure>
<h3 id="Model-contains-model-mj-objectWithKeyValues"><a href="#Model-contains-model-mj-objectWithKeyValues" class="headerlink" title="Model contains model: + mj_objectWithKeyValues"></a>Model contains model: <code>+ mj_objectWithKeyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Define a JSON dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</span><br><span class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</span><br><span class="line">                                 <span class="string">@"age"</span>:@(<span class="number">31</span>),</span><br><span class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</span><br><span class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</span><br><span class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</span><br><span class="line">                                 <span class="string">@"child"</span>:@&#123;</span><br><span class="line">                                         <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</span><br><span class="line">                                         <span class="string">@"age"</span>:@(<span class="number">2</span>)</span><br><span class="line">                                         &#125;</span><br><span class="line">                                 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; JQPerson</span></span><br><span class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];  </span><br><span class="line"></span><br><span class="line"><span class="comment">// Print </span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name:%@, age:%ld, sex:%ld, address:%@, marriage:%d, childname:%@, childage:%ld."</span>, person.name, person.age, person.sex, person.address, person.marriage, person.child.name, person.child.age);</span><br><span class="line"><span class="comment">// name:zjt, age:31, sex:0, address:FuZhou, marriage:1, childname:zje, childage:2.</span></span><br></pre></td></tr></table></figure>
<h3 id="Model-gt-JSON-mj-keyValues"><a href="#Model-gt-JSON-mj-keyValues" class="headerlink" title="Model -&gt; JSON: - mj_keyValues"></a>Model -&gt; JSON: <code>- mj_keyValues</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New model</span></span><br><span class="line">User *user = [[User alloc] init];</span><br><span class="line">user.name = <span class="string">@"Jack"</span>;</span><br><span class="line">user.icon = <span class="string">@"lufy.png"</span>;</span><br><span class="line"></span><br><span class="line">Status *status = [[Status alloc] init];</span><br><span class="line">status.user = user;</span><br><span class="line">status.text = <span class="string">@"Nice mood!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Status -&gt; JSON</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *statusDict = status.mj_keyValues;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, statusDict);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> text = "Nice mood!";</span></span><br><span class="line"><span class="comment"> user =     &#123;</span></span><br><span class="line"><span class="comment"> icon = "lufy.png";</span></span><br><span class="line"><span class="comment"> name = Jack;</span></span><br><span class="line"><span class="comment"> &#125;;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// More complex situation</span></span><br><span class="line">Student *stu = [[Student alloc] init];</span><br><span class="line">stu.ID = <span class="string">@"123"</span>;</span><br><span class="line">stu.oldName = <span class="string">@"rose"</span>;</span><br><span class="line">stu.nowName = <span class="string">@"jack"</span>;</span><br><span class="line">stu.desc = <span class="string">@"handsome"</span>;</span><br><span class="line">stu.nameChangedTime = <span class="string">@"2018-09-08"</span>;</span><br><span class="line"></span><br><span class="line">Bag *bag = [[Bag alloc] init];</span><br><span class="line">bag.name = <span class="string">@"a red bag"</span>;</span><br><span class="line">bag.price = <span class="number">205</span>;</span><br><span class="line">stu.bag = bag;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *stuDict = stu.mj_keyValues;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, stuDict);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    ID = 123;</span></span><br><span class="line"><span class="comment">    bag =     &#123;</span></span><br><span class="line"><span class="comment">        name = "\U5c0f\U4e66\U5305";</span></span><br><span class="line"><span class="comment">        price = 205;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    desc = handsome;</span></span><br><span class="line"><span class="comment">    nameChangedTime = "2018-09-08";</span></span><br><span class="line"><span class="comment">    nowName = jack;</span></span><br><span class="line"><span class="comment">    oldName = rose;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="Model-contains-model-array-mj-objectClassInArray-mj-setupObjectClassInArray"><a href="#Model-contains-model-array-mj-objectClassInArray-mj-setupObjectClassInArray" class="headerlink" title="Model contains model array: + mj_objectClassInArray; + mj_setupObjectClassInArray:;"></a>Model contains model array: <code>+ mj_objectClassInArray; + mj_setupObjectClassInArray:;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change The child model to childs array</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *childs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JQPerson.m implements +mj_objectClassInArray method to tell MJExtension what type model will be contained in childs</span></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)mj_objectClassInArray &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;</span><br><span class="line">             <span class="string">@"childs"</span>:<span class="string">@"JQChild"</span></span><br><span class="line">             &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or setup by this before serialization</span></span><br><span class="line">[JQPerson mj_setupObjectClassInArray:^<span class="built_in">NSDictionary</span> *&#123;</span><br><span class="line">        <span class="keyword">return</span> @&#123;<span class="string">@"childs"</span>:<span class="string">@"JQChild"</span>&#125;;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a JSON dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</span><br><span class="line">                             <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</span><br><span class="line">                             <span class="string">@"age"</span>:@(<span class="number">31</span>),</span><br><span class="line">                             <span class="string">@"sex"</span>:@(JQSexMale),</span><br><span class="line">                             <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</span><br><span class="line">                             <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</span><br><span class="line">                             <span class="string">@"childs"</span>:@[@&#123;</span><br><span class="line">                                            <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</span><br><span class="line">                                            <span class="string">@"age"</span>:@(<span class="number">2</span>)</span><br><span class="line">                                            &#125;,</span><br><span class="line">                                        @&#123;</span><br><span class="line">                                            <span class="string">@"name"</span>:<span class="string">@"zjj"</span>,</span><br><span class="line">                                            <span class="string">@"age"</span>:@(<span class="number">4</span>)</span><br><span class="line">                                            &#125;]</span><br><span class="line">                             &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; Model</span></span><br><span class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print</span></span><br><span class="line"><span class="keyword">for</span> (JQChild *child <span class="keyword">in</span> person.childs) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"childname:%@, childage:%ld\n"</span>, child.name, child.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// childname:zje, childage:2</span></span><br><span class="line"><span class="comment">// childname:zjj, childage:4</span></span><br></pre></td></tr></table></figure>
<h3 id="JSON-array-gt-model-array-mj-objectArrayWithKeyValuesArray"><a href="#JSON-array-gt-model-array-mj-objectArrayWithKeyValuesArray" class="headerlink" title="JSON array -&gt; model array: + mj_objectArrayWithKeyValuesArray"></a>JSON array -&gt; model array: <code>+ mj_objectArrayWithKeyValuesArray</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *dictArray = @[</span><br><span class="line">                         @&#123;</span><br><span class="line">                             <span class="string">@"name"</span> : <span class="string">@"Jack"</span>,</span><br><span class="line">                             <span class="string">@"icon"</span> : <span class="string">@"lufy.png"</span></span><br><span class="line">                         &#125;,</span><br><span class="line">                         @&#123;</span><br><span class="line">                             <span class="string">@"name"</span> : <span class="string">@"Rose"</span>,</span><br><span class="line">                             <span class="string">@"icon"</span> : <span class="string">@"nami.png"</span></span><br><span class="line">                         &#125;</span><br><span class="line">                     ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON array -&gt; User array</span></span><br><span class="line"><span class="built_in">NSArray</span> *userArray = [User mj_objectArrayWithKeyValuesArray:dictArray];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Printing</span></span><br><span class="line"><span class="keyword">for</span> (User *user <span class="keyword">in</span> userArray) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"name=%@, icon=%@"</span>, user.name, user.icon);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// name=Jack, icon=lufy.png</span></span><br><span class="line"><span class="comment">// name=Rose, icon=nami.png</span></span><br></pre></td></tr></table></figure>
<h3 id="Model-array-gt-JSON-array-mj-keyValuesArrayWithObjectArray"><a href="#Model-array-gt-JSON-array-mj-keyValuesArrayWithObjectArray" class="headerlink" title="Model array -&gt; JSON array: + mj_keyValuesArrayWithObjectArray"></a>Model array -&gt; JSON array: <code>+ mj_keyValuesArrayWithObjectArray</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// New model array</span></span><br><span class="line">User *user1 = [[User alloc] init];</span><br><span class="line">user1.name = <span class="string">@"Jack"</span>;</span><br><span class="line">user1.icon = <span class="string">@"lufy.png"</span>;</span><br><span class="line"></span><br><span class="line">User *user2 = [[User alloc] init];</span><br><span class="line">user2.name = <span class="string">@"Rose"</span>;</span><br><span class="line">user2.icon = <span class="string">@"nami.png"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *userArray = @[user1, user2];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model array -&gt; JSON array</span></span><br><span class="line"><span class="built_in">NSArray</span> *dictArray = [User mj_keyValuesArrayWithObjectArray:userArray];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, dictArray);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> (</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> icon = "lufy.png";</span></span><br><span class="line"><span class="comment"> name = Jack;</span></span><br><span class="line"><span class="comment"> &#125;,</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> icon = "nami.png";</span></span><br><span class="line"><span class="comment"> name = Rose;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> )</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="Model-name-JSON-key-mapping-mj-replacedKeyFromPropertyName-mj-setupReplacedKeyFromPropertyName"><a href="#Model-name-JSON-key-mapping-mj-replacedKeyFromPropertyName-mj-setupReplacedKeyFromPropertyName" class="headerlink" title="Model name - JSON key mapping: + mj_replacedKeyFromPropertyName; + mj_setupReplacedKeyFromPropertyName;"></a>Model name - JSON key mapping: <code>+ mj_replacedKeyFromPropertyName; + mj_setupReplacedKeyFromPropertyName;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Change the childs array to childname string</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQPerson</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) JQSex sex;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *address;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">getter</span>=isMarried) <span class="built_in">BOOL</span> marriage;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *childname;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JQPerson.m implements +mj_replacedKeyFromPropertyName method to tell MJExtension how to map</span></span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)mj_replacedKeyFromPropertyName &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;<span class="string">@"childname"</span>:<span class="string">@"child.name"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or setup by this before serialization</span></span><br><span class="line">[JQPerson mj_setupReplacedKeyFromPropertyName:^<span class="built_in">NSDictionary</span> *&#123;</span><br><span class="line">        <span class="keyword">return</span> @&#123;<span class="string">@"childname"</span>:<span class="string">@"child.name"</span>&#125;;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a JSON dictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *personDict = @&#123;</span><br><span class="line">                                 <span class="string">@"name"</span>:<span class="string">@"zjt"</span>,</span><br><span class="line">                                 <span class="string">@"age"</span>:@(<span class="number">31</span>),</span><br><span class="line">                                 <span class="string">@"sex"</span>:@(JQSexMale),</span><br><span class="line">                                 <span class="string">@"address"</span>:<span class="string">@"FuZhou"</span>,</span><br><span class="line">                                 <span class="string">@"marriage"</span>:<span class="string">@"true"</span>,</span><br><span class="line">                                 <span class="string">@"child"</span>:@&#123;</span><br><span class="line">                                         <span class="string">@"name"</span>:<span class="string">@"zje"</span>,</span><br><span class="line">                                         <span class="string">@"age"</span>:@(<span class="number">2</span>)</span><br><span class="line">                                         &#125;</span><br><span class="line">                                 &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON -&gt; JQPerson</span></span><br><span class="line">JQPerson *person = [JQPerson mj_objectWithKeyValues:personDict];   </span><br><span class="line"></span><br><span class="line"><span class="comment">// Print </span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"childname:%@"</span>, person.childname);</span><br><span class="line"><span class="comment">// childname:zje</span></span><br></pre></td></tr></table></figure>
<h3 id="NSCoding-MJExtensionCodingImplementation-mj-setupIgnoredCodingPropertyNames"><a href="#NSCoding-MJExtensionCodingImplementation-mj-setupIgnoredCodingPropertyNames" class="headerlink" title="NSCoding: MJExtensionCodingImplementation, + mj_setupIgnoredCodingPropertyNames:;"></a>NSCoding: <code>MJExtensionCodingImplementation, + mj_setupIgnoredCodingPropertyNames:;</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"MJExtension.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Bag</span></span></span><br><span class="line"><span class="comment">// NSCoding Implementation</span></span><br><span class="line">MJExtensionCodingImplementation</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// what properties not to be coded</span></span><br><span class="line">[Bag mj_setupIgnoredCodingPropertyNames:^<span class="built_in">NSArray</span> *&#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// Equals: Bag.m implements +mj_ignoredCodingPropertyNames method.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create model</span></span><br><span class="line">Bag *bag = [[Bag alloc] init];</span><br><span class="line">bag.name = <span class="string">@"Red bag"</span>;</span><br><span class="line">bag.price = <span class="number">200.8</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSString</span> *file = [<span class="built_in">NSHomeDirectory</span>() stringByAppendingPathComponent:<span class="string">@"Desktop/bag.data"</span>];</span><br><span class="line"><span class="comment">// Encoding</span></span><br><span class="line">[<span class="built_in">NSKeyedArchiver</span> archiveRootObject:bag toFile:file];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decoding</span></span><br><span class="line">Bag *decodedBag = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:file];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name=%@, price=%f"</span>, decodedBag.name, decodedBag.price);</span><br><span class="line"><span class="comment">// name=(null), price=200.800000</span></span><br></pre></td></tr></table></figure>
<h3 id="NSString-gt-NSDate-nil-gt-””-mj-newValueFromOldValue-property"><a href="#NSString-gt-NSDate-nil-gt-””-mj-newValueFromOldValue-property" class="headerlink" title="NSString -&gt; NSDate, nil -&gt; @””: - mj_newValueFromOldValue:property:"></a>NSString -&gt; NSDate, nil -&gt; @””: <code>- mj_newValueFromOldValue:property:</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Book</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"MJExtension.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Book</span></span></span><br><span class="line">- (<span class="keyword">id</span>)mj_newValueFromOldValue:(<span class="keyword">id</span>)oldValue property:(MJProperty *)property</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ([property.name isEqualToString:<span class="string">@"publisher"</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldValue == <span class="literal">nil</span>) <span class="keyword">return</span> <span class="string">@""</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (property.type.typeClass == [<span class="built_in">NSDate</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *fmt = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        fmt.dateFormat = <span class="string">@"yyyy-MM-dd"</span>;</span><br><span class="line">        <span class="keyword">return</span> [fmt dateFromString:oldValue];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NSDictionary</span></span><br><span class="line"><span class="built_in">NSDictionary</span> *dict = @&#123;</span><br><span class="line">                       <span class="string">@"name"</span> : <span class="string">@"5分钟突破iOS开发"</span>,</span><br><span class="line">                       <span class="string">@"publishedTime"</span> : <span class="string">@"2011-09-10"</span></span><br><span class="line">                       &#125;;</span><br><span class="line"><span class="comment">// NSDictionary -&gt; Book</span></span><br><span class="line">Book *book = [Book mj_objectWithKeyValues:dict];</span><br><span class="line"></span><br><span class="line"><span class="comment">// printing</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"name=%@, publisher=%@, publishedTime=%@"</span>, book.name, book.publisher, book.publishedTime);</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="noopener">MJExtension</a></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>MJExtension</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>NJKWebViewProgress 的使用</title>
    <url>/2016/08/30/NJKWebViewProgress/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pod <span class="string">'NJKWebViewProgress'</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="导包并遵循协议"><a href="#导包并遵循协议" class="headerlink" title="导包并遵循协议"></a>导包并遵循协议</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NJKWebViewProgress.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"NJKWebViewProgressView.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">NJKWebViewProgressDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> <span class="built_in">UIWebView</span> *pageLoadedWV;               <span class="comment">/**&lt; 显示加载页面的 WebView */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>) <span class="keyword">IBOutlet</span> NJKWebViewProgressView *pageLoadPV;    <span class="comment">/**&lt; 显示加载进度的 ProgressView */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) NJKWebViewProgress *progressProxy;            <span class="comment">/**&lt; 处理加载进度代理 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<h4 id="设置代理并加载界面"><a href="#设置代理并加载界面" class="headerlink" title="设置代理并加载界面"></a>设置代理并加载界面</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 设置代理</span></span><br><span class="line">    <span class="keyword">self</span>.pageLoadedWV.delegate = <span class="keyword">self</span>.progressProxy;</span><br><span class="line">    <span class="keyword">self</span>.progressProxy.progressDelegate = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过请求加载页面</span></span><br><span class="line">    [<span class="keyword">self</span>.pageLoadedWV loadRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://jokerz.me"</span>]]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更新加载进度"><a href="#更新加载进度" class="headerlink" title="更新加载进度"></a>更新加载进度</h4><h5 id="通过代理"><a href="#通过代理" class="headerlink" title="通过代理"></a>通过代理</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> mark <span class="meta-string">&lt;NJKWebViewProgressDelegate&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  更新加载进度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webViewProgress NJKWebViewProgress 对象</span></span><br><span class="line"><span class="comment"> *  @param progress        当前加载进度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewProgress:(NJKWebViewProgress *)webViewProgress updateProgress:(<span class="keyword">float</span>)progress &#123;</span><br><span class="line">    <span class="keyword">self</span>.pageLoadPV.hidden = (progress == <span class="number">1.0</span>);</span><br><span class="line">    [<span class="keyword">self</span>.pageLoadPV setProgress:progress animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="通过-block-回调"><a href="#通过-block-回调" class="headerlink" title="通过 block 回调"></a>通过 block 回调</h5><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span>.progressProxy.progressBlock = ^(<span class="keyword">float</span> progress) &#123;</span><br><span class="line">    weakSelf.pageLoadPV.hidden = (progress == <span class="number">1.0</span>);</span><br><span class="line">    [weakSelf.pageLoadPV setProgress:progress animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f7bs74x4ltj208w0get9f.jpg" alt="效果"></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>NJKWebViewProgress</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 常用指令</title>
    <url>/2016/09/15/SVN-code/</url>
    <content><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn <span class="built_in">help</span></span><br><span class="line">$ svn <span class="built_in">help</span> <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h4 id="导入数据至你的远程版本库"><a href="#导入数据至你的远程版本库" class="headerlink" title="导入数据至你的远程版本库"></a>导入数据至你的远程版本库</h4><ul>
<li>导入文件和目录<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn import [file-path] [svn-path] -m <span class="string">"[message]"</span></span><br></pre></td></tr></table></figure></li>
<li>推荐的版本库布局<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn list file:///var/svn/single-project-repo</span><br><span class="line">trunk/</span><br><span class="line">branches/</span><br><span class="line">tags/</span><br><span class="line">$ svn list file:///var/svn/multi-project-repo</span><br><span class="line">project-A/</span><br><span class="line">project-B/</span><br><span class="line">$ svn list file:///var/svn/multi-project-repo/project-A</span><br><span class="line">trunk/</span><br><span class="line">branches/</span><br><span class="line">tags/</span><br></pre></td></tr></table></figure>
<h4 id="从远程版本库导出至本地工作区"><a href="#从远程版本库导出至本地工作区" class="headerlink" title="从远程版本库导出至本地工作区"></a>从远程版本库导出至本地工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn checkout [svn-path]</span><br></pre></td></tr></table></figure>
<h4 id="更新工作区"><a href="#更新工作区" class="headerlink" title="更新工作区"></a>更新工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn update</span><br></pre></td></tr></table></figure>
<h4 id="修改工作区"><a href="#修改工作区" class="headerlink" title="修改工作区"></a>修改工作区</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件或文件夹下文件添加至版本库，若只需添加文件夹可以使用 --depth=empth</span></span><br><span class="line">$ svn add [file-path] | [dir-path]</span><br><span class="line"><span class="comment"># 从版本库删除</span></span><br><span class="line">$ svn delete [file-path] | [dir-path]</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">$ svn copy</span><br><span class="line">$ svn move</span><br><span class="line">$ svn mkdir</span><br></pre></td></tr></table></figure>
<h4 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn status</span><br><span class="line">$ svn status [file-path]</span><br><span class="line">$ svn status -v</span><br><span class="line">$ svn status -u -v</span><br></pre></td></tr></table></figure>
<h4 id="查看修改详情"><a href="#查看修改详情" class="headerlink" title="查看修改详情"></a>查看修改详情</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn diff</span><br><span class="line">$ svn diff &gt; patchfile</span><br></pre></td></tr></table></figure>
<h4 id="恢复修改"><a href="#恢复修改" class="headerlink" title="恢复修改"></a>恢复修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn revert</span><br></pre></td></tr></table></figure>
####</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>SVN 的简单使用</title>
    <url>/2016/09/08/SVN/</url>
    <content><![CDATA[<h3 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svnadmin create /Users/Joker/svn/MyRepo</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="设置代码库权限以及相关配置"><a href="#设置代码库权限以及相关配置" class="headerlink" title="设置代码库权限以及相关配置"></a>设置代码库权限以及相关配置</h3><p>修改代码库文件夹下的 <code>conf/svnserve.conf</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /Users/Joker/svn/MyRepo/conf/svnserve.conf</span><br></pre></td></tr></table></figure>

<p>删除以下几项前的 <code>#</code> 号，表示代码库可读可写，用户密码等配置在 <code>passwd</code> 文件，授权信息在 <code>authz</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># anon-access &#x3D; read  </span><br><span class="line"># auth-access &#x3D; write  </span><br><span class="line"># password-db &#x3D; passwd  </span><br><span class="line"># authz-db &#x3D; authz</span><br></pre></td></tr></table></figure>

<h3 id="配置用户密码等信息"><a href="#配置用户密码等信息" class="headerlink" title="配置用户密码等信息"></a>配置用户密码等信息</h3><p>编辑代码库文件夹下的 <code>conf/passwd</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /Users/Joker/svn/MyRepo/conf/passwd</span><br></pre></td></tr></table></figure>
<p>在 <code>[users]</code> 标签下添加用户信息，表示账号为：zjq，密码为：123</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zjq &#x3D; 123</span><br></pre></td></tr></table></figure>

<h3 id="配置用户组或用户权限"><a href="#配置用户组或用户权限" class="headerlink" title="配置用户组或用户权限"></a>配置用户组或用户权限</h3><p>编辑代码库文件夹下的 <code>conf/authz</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi /Users/Joker/svn/MyRepo/conf/authz</span><br></pre></td></tr></table></figure>
<p>可以将若干用户分为一组，统一配置权限，<code>[/]</code> 表示代码库下所有文件，<code>rw</code> 表示可读可写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[groups]</span><br><span class="line">group1 &#x3D; zjq, joker</span><br><span class="line"></span><br><span class="line">[&#x2F;]</span><br><span class="line">@group1 &#x3D; rw</span><br></pre></td></tr></table></figure>
<p>也可以单独给用户配置权限，注意给用户单独配置权限不需要 <code>@</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#x2F;]</span><br><span class="line">zjq &#x3D; rw</span><br></pre></td></tr></table></figure>

<h3 id="启动-SVN-服务器"><a href="#启动-SVN-服务器" class="headerlink" title="启动 SVN 服务器"></a>启动 SVN 服务器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svnserve -d -r /Users/Joker/svn/MyRepo</span><br></pre></td></tr></table></figure>

<h3 id="使用-SVN"><a href="#使用-SVN" class="headerlink" title="使用 SVN"></a>使用 SVN</h3><h4 id="从本地导入代码至服务器"><a href="#从本地导入代码至服务器" class="headerlink" title="从本地导入代码至服务器"></a>从本地导入代码至服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn import [file-path] [server-path] --username=zjq --password=123 -m <span class="string">"initialize"</span></span><br></pre></td></tr></table></figure>
<h4 id="从服务器下载代码至本地代码库"><a href="#从服务器下载代码至本地代码库" class="headerlink" title="从服务器下载代码至本地代码库"></a>从服务器下载代码至本地代码库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn checkout [server-path] --username=zjq --password=123 [repo-path]</span><br></pre></td></tr></table></figure>
<h4 id="提交修改至服务器"><a href="#提交修改至服务器" class="headerlink" title="提交修改至服务器"></a>提交修改至服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ svn commit -m &quot;modified the file&quot;</span><br></pre></td></tr></table></figure>
<h4 id="更新服务器代码至本地代码库"><a href="#更新服务器代码至本地代码库" class="headerlink" title="更新服务器代码至本地代码库"></a>更新服务器代码至本地代码库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn update</span><br></pre></td></tr></table></figure>
<h4 id="查看帮助信息"><a href="#查看帮助信息" class="headerlink" title="查看帮助信息"></a>查看帮助信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ svn <span class="built_in">help</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>UIWebView 的简单使用</title>
    <url>/2016/08/30/UIWebView/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>你可以在你的 APP 中使用 UIWebView 内嵌网页内容，你也可以在网页浏览历史中前进或后退，甚至利用代码改变网页内容。除了 HTML 网页以外，UIWebView 还可以用来展示其它内容，例如：Keynote、PDF 以及 Pages 文档，但是为了富文本的更好渲染，还是最好使用 UITextView。</p>
</blockquote>
<a id="more"></a>

<hr>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="加载页面"><a href="#加载页面" class="headerlink" title="加载页面"></a>加载页面</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过 URL 请求加载页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param request URL 请求，其中 URL 可以为加载文件的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)loadRequest:(<span class="built_in">NSURLRequest</span> *)request;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过载入一段 HTML 字符串加载页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param string  HTML 字符串</span></span><br><span class="line"><span class="comment"> *  @param baseURL 基本路径，用于寻找页面中图片等资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)loadHTMLString:(<span class="built_in">NSString</span> *)string baseURL:(<span class="keyword">nullable</span> <span class="built_in">NSURL</span> *)baseURL;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过二进制数据加载页面（较少用）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param data             数据</span></span><br><span class="line"><span class="comment"> *  @param MIMEType         数据类型</span></span><br><span class="line"><span class="comment"> *  @param textEncodingName 数据编码形式</span></span><br><span class="line"><span class="comment"> *  @param baseURL          基本路径，用于寻找页面中图片等资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)loadData:(<span class="built_in">NSData</span> *)data MIMEType:(<span class="built_in">NSString</span> *)MIMEType textEncodingName:(<span class="built_in">NSString</span> *)textEncodingName baseURL:(<span class="built_in">NSURL</span> *)baseURL;</span><br></pre></td></tr></table></figure>
<h4 id="UIWebViewDelegate-代理"><a href="#UIWebViewDelegate-代理" class="headerlink" title="UIWebViewDelegate 代理"></a>UIWebViewDelegate 代理</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  是否根据请求开始加载页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView        显示页面的 UIWebView</span></span><br><span class="line"><span class="comment"> *  @param request        加载的请求</span></span><br><span class="line"><span class="comment"> *  @param navigationType 用户行为类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return     YES：加载页面</span></span><br><span class="line"><span class="comment">                NO：不加载页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)webView:(<span class="built_in">UIWebView</span> *)webView shouldStartLoadWithRequest:(<span class="built_in">NSURLRequest</span> *)request navigationType:(<span class="built_in">UIWebViewNavigationType</span>)navigationType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  WebView 已经开始加载页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView 显示页面的 WebView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  WebView 已经结束加载页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView 显示页面的 WebView</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  WebView 加载页面失败</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param webView 显示页面的 WebView</span></span><br><span class="line"><span class="comment"> *  @param error   错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webView:(<span class="built_in">UIWebView</span> *)webView didFailLoadWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error;</span><br></pre></td></tr></table></figure>
<p>####相关属性</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** UIWebViewDelegate 代理 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">id</span> &lt;<span class="built_in">UIWebViewDelegate</span>&gt; delegate;</span><br><span class="line"><span class="comment">/** 内嵌的 UIScrollView */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">UIScrollView</span> *scrollView <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</span><br><span class="line"><span class="comment">/** 载入的请求 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) <span class="built_in">NSURLRequest</span> *request;</span><br><span class="line"><span class="comment">/** 当前页面是否可以后退 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoBack) <span class="built_in">BOOL</span> canGoBack;</span><br><span class="line"><span class="comment">/** 当前界面是否可以前进 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=canGoForward) <span class="built_in">BOOL</span> canGoForward;</span><br><span class="line"><span class="comment">/** 当前页面是否正在加载 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">getter</span>=isLoading) <span class="built_in">BOOL</span> loading;</span><br><span class="line"><span class="comment">/** 设置页面是否缩放至屏幕大小 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> scalesPageToFit;</span><br><span class="line"><span class="comment">/** 已弃用 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> detectsPhoneNumbers <span class="built_in">NS_DEPRECATED_IOS</span>(<span class="number">2</span>_0, <span class="number">3</span>_0);</span><br><span class="line"><span class="comment">/** 设置可转换成链接的类型 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIDataDetectorTypes</span> dataDetectorTypes <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">3</span>_0);</span><br><span class="line"><span class="comment">/** 设置是否使用内联播放器播放，iPad 默认为 YES，iPhone 默认为 NO */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsInlineMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0);</span><br><span class="line"><span class="comment">/** 设置播放器自动播放还是需用户点击，iPad 及iPhone 默认均为 YES */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">4</span>_0); </span><br><span class="line"><span class="comment">/** 设置是否支持 Air Play，iPad 及 iPhone 默认均为 YES */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> mediaPlaybackAllowsAirPlay <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0); </span><br><span class="line"><span class="comment">/** 设置是否将数据加载入内存后渲染界面，iPhone 及 iPad 默认均为 NO */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> suppressesIncrementalRendering <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0); </span><br><span class="line"><span class="comment">/** 是否自动展示键盘，默认为 YES */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> keyboardDisplayRequiresUserAction <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0); </span><br><span class="line"><span class="comment">/** 设置当网页的大小超出view时的分页显示模式 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationMode</span> paginationMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"><span class="comment">/** 这个属性决定了CSS属性是采用column-break 还是page-breaking样式 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">UIWebPaginationBreakingMode</span> paginationBreakingMode <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"><span class="comment">/** 分页长度 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> pageLength <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"><span class="comment">/** 多个页面之间差距值 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> gapBetweenPages <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"><span class="comment">/** 分页个数 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSUInteger</span> pageCount <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</span><br><span class="line"><span class="comment">/** 设置多媒体播放是否支持画中画 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsPictureInPictureMediaPlayback <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0);</span><br><span class="line"><span class="comment">/** 设置是否支持链接预览 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> allowsLinkPreview <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">9</span>_0); <span class="comment">// default is NO</span></span><br></pre></td></tr></table></figure>
<h4 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  重新加载页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)reload;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  停止加载页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)stopLoading;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  返回至上一个页面，可以配合 canGoBack 属性使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)goBack;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  前进至刚才的页面，可以配合 canGoForward 属性使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)goForward;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  通过 JavaScript 获取页面字符串，可以通过该方法注入 JavaScript 改变页面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param script JavaScript 字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return 获得的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)stringByEvaluatingJavaScriptFromString:(<span class="built_in">NSString</span> *)script;</span><br></pre></td></tr></table></figure>

<h4 id="各枚举类型"><a href="#各枚举类型" class="headerlink" title="各枚举类型"></a>各枚举类型</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  用户触发行为类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebViewNavigationType</span>) &#123;</span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeLinkClicked</span>,     <span class="comment">//用户触发了一个链接</span></span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeFormSubmitted</span>,   <span class="comment">//用户提交了一个表单</span></span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeBackForward</span>,     <span class="comment">//用户触击前进前进或返回按钮</span></span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeReload</span>,          <span class="comment">//用户触击重新加载的按钮</span></span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeFormResubmitted</span>, <span class="comment">//用户重复提交表单</span></span><br><span class="line">    <span class="built_in">UIWebViewNavigationTypeOther</span>            <span class="comment">//发生了其他行为</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  可转换为链接的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIDataDetectorTypes</span>) &#123;</span><br><span class="line">    <span class="built_in">UIDataDetectorTypePhoneNumber</span>       <span class="comment">// 电话号码</span></span><br><span class="line">    <span class="built_in">UIDataDetectorTypeLink</span>              <span class="comment">// URL 链接</span></span><br><span class="line">    <span class="built_in">UIDataDetectorTypeAddress</span>           <span class="comment">// 地址</span></span><br><span class="line">    <span class="built_in">UIDataDetectorTypeCalendarEvent</span>     <span class="comment">// 日程</span></span><br><span class="line">    <span class="built_in">UIDataDetectorTypeNone</span>              <span class="comment">// 不转换</span></span><br><span class="line">    <span class="built_in">UIDataDetectorTypeAll</span>               <span class="comment">// 全转换</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  页面分页模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebPaginationMode</span>) &#123;</span><br><span class="line">    <span class="built_in">UIWebPaginationModeUnpaginated</span>,     <span class="comment">//不使用分页效果</span></span><br><span class="line">    <span class="built_in">UIWebPaginationModeLeftToRight</span>,     <span class="comment">//将网页超出部分分页，从左向右进行翻页</span></span><br><span class="line">    <span class="built_in">UIWebPaginationModeTopToBottom</span>,     <span class="comment">//将网页超出部分分页，从上向下进行翻页</span></span><br><span class="line">    <span class="built_in">UIWebPaginationModeBottomToTop</span>,     <span class="comment">//将网页超出部分分页，从下向上进行翻页</span></span><br><span class="line">    <span class="built_in">UIWebPaginationModeRightToLeft</span>      <span class="comment">//将网页超出部分分页，从右向左进行翻页</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  这个枚举决定了webView加载页面具有CSS属性时是使用页的样式还是以列的样式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>, <span class="built_in">UIWebPaginationBreakingMode</span>) &#123;</span><br><span class="line">    <span class="built_in">UIWebPaginationBreakingModePage</span>,    <span class="comment">//默认设置是这个属性，CSS属性以页样式。</span></span><br><span class="line">    <span class="built_in">UIWebPaginationBreakingModeColumn</span>   <span class="comment">//当UIWebPaginationBreakingMode 设置这个属性的时候，这个页面内容 CSS 属性以 column-break 代替 page-breaking 样式。</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>不可以将 UIWebView 或者 UITableView 内嵌至 UIScrollView 对象，因为触摸事件会在两个对象间混乱，因而作出错误的操作；</li>
<li>如果是运行在 iOS 8 以上的系统可以使用 WKWebView 取代 UIWebView。</li>
</ul>
<hr>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>可以结合一下第三方类库使用：   </p>
<ul>
<li><a href="https://github.com/ninjinkun/NJKWebViewProgress" target="_blank" rel="noopener">NJKWebViewProgress</a>：页面加载进度显示；   </li>
<li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a>：用于 Objective-C ↔ JavaScript 之间的交互。</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>UIWebView</tag>
      </tags>
  </entry>
  <entry>
    <title>block 的使用</title>
    <url>/2016/08/27/block/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li><code>ReturnType</code>：你所想要返回的数据类型；</li>
<li><code>ParameterType</code>：你所要传递的参数类型；</li>
<li><code>parameterName</code>：你所要传递的参数名；</li>
<li><code>blockName</code>：你所构造的 block 名。</li>
</ul>
<a id="more"></a>

<p>（另外参数可以传入多个）</p>
<h3 id="作为变量"><a href="#作为变量" class="headerlink" title="作为变量"></a>作为变量</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">ReturnType (^blockName)(ParameterType) = ^ReturnType (ParameterType parameterName) &#123;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="作为属性"><a href="#作为属性" class="headerlink" title="作为属性"></a>作为属性</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>) ReturnType (^blockName) (ParameterType);</span><br></pre></td></tr></table></figure>
<h3 id="作为方法定义参数"><a href="#作为方法定义参数" class="headerlink" title="作为方法定义参数"></a>作为方法定义参数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)yourMethod:(ReturnType (^)(ParameterType))blockName;</span><br></pre></td></tr></table></figure>
<h3 id="作为方法传入参数"><a href="#作为方法传入参数" class="headerlink" title="作为方法传入参数"></a>作为方法传入参数</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[someObject doSomethingWithBlock: ^ReturnType (ParameterType parameterName) &#123;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<h3 id="匿名-Block"><a href="#匿名-Block" class="headerlink" title="匿名 Block"></a>匿名 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">^ReturnType (ParameterType parameterName) &#123;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="使用-typedef"><a href="#使用-typedef" class="headerlink" title="使用 typedef"></a>使用 <code>typedef</code></h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> ReturnType (^blockName)(ParameterType);</span><br></pre></td></tr></table></figure>
<h3 id="内联-Block"><a href="#内联-Block" class="headerlink" title="内联 Block"></a>内联 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">^ReturnType (ParameterType parameterName) &#123;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;(parameterValue);</span><br></pre></td></tr></table></figure>
<h3 id="递归-Block"><a href="#递归-Block" class="headerlink" title="递归 Block"></a>递归 Block</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">__block ReturnType (^blockName)(ParameterType) = [^ReturnType (ParameterType parameterName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (returnCondition) &#123;</span><br><span class="line">        blockName = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125; <span class="keyword">copy</span>];</span><br><span class="line">blockName(parameterValue);</span><br></pre></td></tr></table></figure>
<h3 id="作为返回值"><a href="#作为返回值" class="headerlink" title="作为返回值"></a>作为返回值</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (ReturnType(^)(ParameterType))methodName &#123;</span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在-swift-中（闭包）"><a href="#在-swift-中（闭包）" class="headerlink" title="在 swift 中（闭包）"></a>在 swift 中（闭包）</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> blockName = &#123; (parameterName: <span class="type">ParameterType</span>) -&gt; <span class="type">ReturnType</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>block</tag>
      </tags>
  </entry>
  <entry>
    <title>用 yarn 代替 npm 管理 React-Native 包依赖</title>
    <url>/2016/11/22/change-npm-to-yarn/</url>
    <content><![CDATA[<h3 id="首先得安装-yarn，可参考Yarn-Installation-on-macOS"><a href="#首先得安装-yarn，可参考Yarn-Installation-on-macOS" class="headerlink" title="首先得安装 yarn，可参考Yarn Installation on macOS"></a>首先得安装 yarn，可参考<a href="http://jokerz.me/2016/10/13/yarn-installation/" target="_blank" rel="noopener">Yarn Installation on macOS</a></h3><h3 id="在命令行中输入："><a href="#在命令行中输入：" class="headerlink" title="在命令行中输入："></a>在命令行中输入：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn global add react-native-cli</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/2016-11-22-143436.jpg" alt=""></p>
<h3 id="之后使用-react-native-init-就是用-yarn-来下载包："><a href="#之后使用-react-native-init-就是用-yarn-来下载包：" class="headerlink" title="之后使用 react-native init 就是用 yarn 来下载包："></a>之后使用 react-native init 就是用 yarn 来下载包：</h3><p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/2016-11-22-143004.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>Yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>CocoaPods 的安装与使用</title>
    <url>/2016/04/22/cocoapods/</url>
    <content><![CDATA[<h3 id="什么是-CocoaPods？"><a href="#什么是-CocoaPods？" class="headerlink" title="什么是 CocoaPods？"></a>什么是 CocoaPods？</h3><blockquote>
<p>CocoaPods 可以为你管理 Xcode 项目中使用的依赖库，且只需要编辑一个简单的文本文件—— Podfile 。CocoaPods 会解析这些库之间的依赖，获取源代码，并将它们放入一个 Xcode 工作空间，以可以被用来构造你的项目。</p>
</blockquote>
<a id="more"></a>

<h3 id="CocoaPods-的安装"><a href="#CocoaPods-的安装" class="headerlink" title="CocoaPods 的安装"></a>CocoaPods 的安装</h3><blockquote>
<p>CocoaPods 是以 Ruby 构建的，幸运的是 Mac OS X 自带默认的 Ruby 环境，因此安装很简单，不过需先更换下 Ruby 的默认源（被墙）。    </p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yph89faqj20b203y3z7.jpg" alt="Ruby源.png"></p>
<ul>
<li>移除 Ruby 默认源：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure></li>
<li>添加国内淘宝提供的 Ruby 源（注：已经换成 https 协议的）：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem sources -a https://ruby.taobao.org/</span><br></pre></td></tr></table></figure></li>
<li>查看是否替换成功，并且确定只有 <code>https://ruby.taobao.org/</code> 这一个源：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gem sources -l:</span><br></pre></td></tr></table></figure></li>
<li>若显示如下则表示替换成功：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*** CURRENT SOURCES *** </span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org/</span><br></pre></td></tr></table></figure></li>
<li>安装 CocoaPods 至:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gem install cocoapods(OS X 10.11之前)</span><br><span class="line">$ sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods (OS X 10.11之后)</span><br></pre></td></tr></table></figure></li>
<li>输入密码，安装成功后接着执行，设置 CocoaPods 的环境<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod setup</span><br></pre></td></tr></table></figure></li>
<li>之后便会在 <code>/usr/local/bin</code> 或 <code>/usr/bin</code> 文件夹下看到这些可执行文件：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yphqwe4jj204p02omxa.jpg" alt="pod"></li>
<li>可以查看下 CocoaPods 版本验证是否安装成功<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod --version</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="终端使用CocoaPods"><a href="#终端使用CocoaPods" class="headerlink" title="终端使用CocoaPods"></a>终端使用CocoaPods</h3><ul>
<li>新建一个 Xcode 项目</li>
<li>cd 到项目根目录下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/Joker/Desktop/TestPods/</span><br></pre></td></tr></table></figure></li>
<li>创建 Podfile<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch Podfile</span><br></pre></td></tr></table></figure></li>
<li>使用 vim 编辑 Podfile<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim Podfile</span><br></pre></td></tr></table></figure></li>
<li>输入如下内容，并 <code>:wq</code> 保存退出   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表示使用平台是iOS</span></span><br><span class="line">platform:ios</span><br><span class="line"><span class="comment"># 导入AFNetworking，没有标明版本的话，默认是导入最新版</span></span><br><span class="line">pod <span class="string">'AFNetworking'</span></span><br></pre></td></tr></table></figure></li>
<li>开始安装需导入的依赖库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pod install</span><br></pre></td></tr></table></figure></li>
<li>导入成功的话会提示你以后使用 <code>XXXX.xcworkspace</code> 文件打开项目    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[!] Please close any current Xcode sessions and use </span><br><span class="line">TestPods.xcworkspace for this project from now on.</span><br></pre></td></tr></table></figure>
<img src="http://ww3.sinaimg.cn/large/801b780agw1f6ypie1flhj20fr07ut9x.jpg" alt="安装成功"></li>
<li>且项目根目录下会自动生成一些文件<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypio6z7kj20520450sy.jpg" alt="项目根目录"></li>
<li>打开项目，此时项目下有两个工作空间，新增的则为 CocoaPods 用以管理依赖库的工作空间，可在该工作空间的 Pods 文件夹下看到导入的依赖库<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypiwmb2ij205404g74g.jpg" alt="项目文件结构"></li>
</ul>
<h3 id="利用-CocoaPods-插件"><a href="#利用-CocoaPods-插件" class="headerlink" title="利用 CocoaPods 插件"></a>利用 CocoaPods 插件</h3><p><strong><em>除了利用终端使用 CocoaPods 之外，还可以为 Xcode 安装 CocoaPods 插件，使 pod 更加简单。</em></strong></p>
<ul>
<li>下载 <a href="https://github.com/kattrali/cocoapods-xcode-plugin" target="_blank" rel="noopener">kattrali/cocoapods-xcode-plugin</a></li>
<li>打开 <code>CocoaPods.xcworkspace</code> 运行，便可在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code> 文件夹下看到 CocoaPods 插件<br><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypj8v2tlj2056069mx9.jpg" alt="cocoapods-xcode-plugin"></li>
<li>从 Xcode 5 开始，苹果要求加入 UUID 证书从而保证插件的稳定性。因此Xcode版本更新之后需要在 <code>cocoapods-xcode-plugin</code> 的 <code>Info.plist</code> 文件中添加 Xcode 的 UUID 。终端下输入：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ defaults <span class="built_in">read</span> /Applications/Xcode.app/Contents/Info </span><br><span class="line">DVTPlugInCompatibilityUUID</span><br></pre></td></tr></table></figure></li>
<li>在 <code>~/Library/Application Support/Developer/Shared/Xcode/Plug-ins/</code> 文件夹下找到 CocoaPods 插件，显示包内容，并在 info.plist 中的 <code>DVTPlugInCompatibilityUUIDs</code> 项新增刚才获取的 UUID ：<br><img src="http://ww2.sinaimg.cn/large/801b780agw1f6ypjiusrvj208g08x3z7.jpg" alt="info.plist"></li>
<li>添加成功后重启Xcode便会提示，选择 <strong><em>Load Bundle</em></strong><br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6ypjsp0d7j20es08bgmd.jpg" alt="Load Bundle"></li>
<li>此时打开Xcode项目便可在 Product 下看到：<br><img src="http://ww1.sinaimg.cn/large/801b780agw1f6ypk4x81kj20cb092ab6.jpg" alt="CocoaPods"></li>
<li>记得修改 GEM_PATH 为 CocoaPods 的安装目录，如：/usr/local/bin</li>
<li>之后使用 CocoaPods pod依赖库便是可视化的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create&#x2F;Edit Podfile:创建或编辑Podfile</span><br><span class="line">Install Pods:安装</span><br><span class="line">Update Pods:更新</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h3><ol>
<li>pod 常用命令：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod install: 安装依赖库，并将版本信息写入 Podfile.lock 文件；</span><br><span class="line">pod plugins:查看可用的 CocoaPods 插件；</span><br><span class="line">pod list:查看远程 pods 库中所有的依赖库；</span><br><span class="line">pod search:查找需导入的依赖库是否在 pods 库中；</span><br><span class="line">pod setup:设置 CocoaPods 的环境；</span><br><span class="line">pod update:更新过期的依赖库，并且创建新的 Podfile.lock 文件；</span><br><span class="line">pod --version: 查看工具版本号；</span><br><span class="line">pod --help:显示帮助信息。</span><br></pre></td></tr></table></figure></li>
<li>pod 控制依赖库版本：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;不显式指定依赖库版本，表示每次都获取最新版本</span><br><span class="line">pod ‘AFNetworking’</span><br><span class="line">&#x2F;&#x2F;只使用2.0版本</span><br><span class="line">pod ‘AFNetworking’,  ‘2.0’</span><br><span class="line">&#x2F;&#x2F;使用高于2.0的版本</span><br><span class="line">pod ‘AFNetworking’, ‘&gt;2.0′</span><br><span class="line">&#x2F;&#x2F;使用大于或等于2.0的版本</span><br><span class="line">pod ‘AFNetworking’, ‘&gt;&#x3D;2.0′</span><br><span class="line">&#x2F;&#x2F;使用小于2.0的版本</span><br><span class="line">pod ‘AFNetworking’, ‘&lt;2.0′</span><br><span class="line">&#x2F;&#x2F;使用小于或等于2.0的版本</span><br><span class="line">pod ‘AFNetworking’, ‘&lt;&#x3D;2.0′</span><br><span class="line">&#x2F;&#x2F;使用大于等于0.1.2但小于0.2的版本，相当于&gt;&#x3D;0.1.2并且&lt;0.2.0</span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;0.1.2′</span><br><span class="line">&#x2F;&#x2F;使用大于等于0.1但小于1.0的版本</span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;0.1′ </span><br><span class="line">&#x2F;&#x2F;高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本 </span><br><span class="line">pod ‘AFNetworking’, ‘~&gt;0′</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>CocoaPods</category>
      </categories>
      <tags>
        <tag>CocoaPods</tag>
      </tags>
  </entry>
  <entry>
    <title>Objective-C 中 self 与 super 的区别</title>
    <url>/2016/08/16/difference-between-self-and-super-in-Objective-C/</url>
    <content><![CDATA[<h3 id="以下代码的打印结果是什么？为什么？"><a href="#以下代码的打印结果是什么？为什么？" class="headerlink" title="以下代码的打印结果是什么？为什么？"></a>以下代码的打印结果是什么？为什么？</h3><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">JQApple</span> : <span class="title">JQFruit</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">JQApple</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="built_in">NSStringFromClass</span>([<span class="keyword">super</span> <span class="keyword">class</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>按照面向对象的思想应该是分别打印<code>JQApple</code>和<code>JQFruit</code><br>然而运行结果却出乎我们的意料，最终均都打印“JQApple”。这是为什么？</p>
<p>因为<code>self</code>是类的隐藏参数，指向当前调用方法的对象。而<code>super</code>并不是如我们所想是指向当前对象父类的指针。其实<code>super</code>是一个编译器标识符，在运行时中与<code>self</code>相同，指向同一个消息接受者，只是<code>self</code>会优先在当前类的<code>methodLists</code>中查找方法，而<code>super</code>则是优先从父类中查找。验证如下：<br>在终端运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ clang -rewrite-objc main.m</span><br></pre></td></tr></table></figure>
<p>可以看到运行时代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_0, <span class="built_in">NSStringFromClass</span>(((Class (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>))));</span><br><span class="line"><span class="built_in">NSLog</span>((<span class="built_in">NSString</span> *)&amp;__NSConstantStringImpl__var_folders_ld_03322m393b5cyvhz2zhv2c100000gn_T_main_97554f_mi_1, <span class="built_in">NSStringFromClass</span>(((Class (*)(__rw_objc_super *, SEL))(<span class="keyword">void</span> *)objc_msgSendSuper)((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>))));</span><br></pre></td></tr></table></figure>
<p>删除相关无关类型及方法后代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">objc_msgSend((<span class="keyword">id</span>)<span class="keyword">self</span>, sel_registerName(<span class="string">"class"</span>));</span><br><span class="line">objc_msgSendSuper((__rw_objc_super)&#123;(<span class="keyword">id</span>)<span class="keyword">self</span>, (<span class="keyword">id</span>)class_getSuperclass(objc_getClass(<span class="string">"JQApple"</span>))&#125;, sel_registerName(<span class="string">"class"</span>));</span><br></pre></td></tr></table></figure>
<p>查看函数定义：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Sends a message with a simple return value to an instance of a class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param self A pointer to the instance of the class that is to receive the message.</span></span><br><span class="line"><span class="comment"> * @param op The selector of the method that handles the message.</span></span><br><span class="line"><span class="comment"> * @param ... </span></span><br><span class="line"><span class="comment"> *   A variable argument list containing the arguments to the method.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return The return value of the method.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @note When it encounters a method call, the compiler generates a call to one of the</span></span><br><span class="line"><span class="comment"> *  functions \c objc_msgSend, \c objc_msgSend_stret, \c objc_msgSendSuper, or \c objc_msgSendSuper_stret.</span></span><br><span class="line"><span class="comment"> *  Messages sent to an object’s superclass (using the \c super keyword) are sent using \c objc_msgSendSuper; </span></span><br><span class="line"><span class="comment"> *  other messages are sent using \c objc_msgSend. Methods that have data structures as return values</span></span><br><span class="line"><span class="comment"> *  are sent using \c objc_msgSendSuper_stret and \c objc_msgSend_stret.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSend(<span class="keyword">id</span> <span class="keyword">self</span>, SEL op, ...)</span><br><span class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Sends a message with a simple return value to the superclass of an instance of a class.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param super A pointer to an \c objc_super data structure. Pass values identifying the</span></span><br><span class="line"><span class="comment"> *  context the message was sent to, including the instance of the class that is to receive the</span></span><br><span class="line"><span class="comment"> *  message and the superclass at which to start searching for the method implementation.</span></span><br><span class="line"><span class="comment"> * @param op A pointer of type SEL. Pass the selector of the method that will handle the message.</span></span><br><span class="line"><span class="comment"> * @param ...</span></span><br><span class="line"><span class="comment"> *   A variable argument list containing the arguments to the method.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @return The return value of the method identified by \e op.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @see objc_msgSend</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">OBJC_EXPORT <span class="keyword">id</span> objc_msgSendSuper(<span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ...)</span><br><span class="line">    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);</span><br></pre></td></tr></table></figure>
<p>可知<code>objc_msgSend</code>函数中的<code>self</code>参数是指指向接收消息的类的实例的指针，即消息接受者，而<code>op</code>参数则是指处理该消息的<code>selector</code>；<code>objc_msgSendSuper</code>函数中的参数<code>super</code>则是一个<code>objc_super</code>结构体，<code>objc_super</code>结构体定义如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Specifies the superclass of an instance. </span></span><br><span class="line"><span class="keyword">struct</span> objc_super &#123;</span><br><span class="line">    <span class="comment">/// Specifies an instance of a class.</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> receiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// Specifies the particular superclass of the instance to message. </span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Class super_class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* super_class is the first class to search */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中<code>receiver</code>是指类的实例，<code>super_class</code>则是指该实例的父类。可以看到在编译后的<code>C++</code>代码中有个<code>__rw_objc_super</code>结构体：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> __rw_objc_super &#123; </span><br><span class="line">    <span class="keyword">struct</span> objc_object *object; </span><br><span class="line">    <span class="keyword">struct</span> objc_object *superClass; </span><br><span class="line">    __rw_objc_super(<span class="keyword">struct</span> objc_object *o, <span class="keyword">struct</span> objc_object *s) : object(o), superClass(s) &#123;&#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其实即为<code>objc_super</code>结构体。通过<code>(__rw_objc_super){(id)self, (id)class_getSuperclass(objc_getClass(&quot;JQApple&quot;))}</code>该段代码可知：我们把<code>self</code>以及<code>JQApple</code>的父类通过结构体的构造方法构造了一个<code>__rw_objc_super</code>结构体，也就是<code>objc_super</code>。因此<code>objc_super</code>结构体中的<code>receiver</code>既是<code>self</code>。所以<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，只是<code>self</code>会优先从当前类的实现中寻找方法处理消息，而<code>super</code>则是会优先从<code>objc_super</code>结构体中的<code>super_class</code>也就是父类的实现中查找。<code>JQFruit</code>及<code>JQApple</code>中均未实现<code>- (Class)class;</code>方法，因此会逐级向上查找最终调用基类<code>NSObject</code>的<code>- (Class)class;</code>方法，通过官方开源的<code>NSObject</code>的<code>- (Class)class;</code>方法代码：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (Class)<span class="keyword">class</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可知，消息接受者是<code>self</code>，而<code>[self class]</code>和<code>[super class]</code>指向的是同一个消息接受者，因此该段代码均打印<code>JQApple</code>。</p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Programming</category>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>self</tag>
        <tag>super</tag>
      </tags>
  </entry>
  <entry>
    <title>如何抽取其它应用素材 - iOS</title>
    <url>/2016/04/17/extract-images/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="下载-ipa-："><a href="#下载-ipa-：" class="headerlink" title="下载 ipa ："></a>下载 ipa ：</h4><blockquote>
<p>iTunes –&gt; App Store –&gt; 下载所需素材的应用。下载完成后，可在我的 iPhone 应用 –&gt; 在 Finder 中显示，看到下载的 ipa 文件。   </p>
</blockquote>
<p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yowx86sxj204d06ct8s.jpg" alt="ipa文件.png"></p>
<a id="more"></a>

<h4 id="生成-cartool-可执行文件"><a href="#生成-cartool-可执行文件" class="headerlink" title="生成 cartool 可执行文件"></a>生成 cartool 可执行文件</h4><blockquote>
<p>在 github 上下载 <a href="https://github.com/steventroughtonsmith/cartool" target="_blank" rel="noopener">cartool</a> ，用 Xcode 打开并执行，便可在项目的 Products 文件夹下找到生成 cartool 可执行文件。</p>
</blockquote>
<p><code>（TIPS：若是需将 cartoon 移动至其他文件夹，不要直接在工程目录下直接拖动，这样只是生成个替身。正确的方式应 show in finder 在 finder 中操作。）</code><br><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yoyp3r0kj205f050weo.jpg" alt="cartool.png">  </p>
<hr>
<h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><h4 id="右击下载的-ipa-文件-–-gt-打开方式-–-gt-选择归档实用工具；"><a href="#右击下载的-ipa-文件-–-gt-打开方式-–-gt-选择归档实用工具；" class="headerlink" title="右击下载的 ipa 文件 –&gt; 打开方式 –&gt; 选择归档实用工具；"></a>右击下载的 ipa 文件 –&gt; 打开方式 –&gt; 选择归档实用工具；</h4><p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yozw2lrqj205s03k3yo.jpg" alt="归档实用工具.png"></p>
<h4 id="可解档出一文件夹-–-gt-Payload-–-gt-显示包内容；"><a href="#可解档出一文件夹-–-gt-Payload-–-gt-显示包内容；" class="headerlink" title="可解档出一文件夹 –&gt; Payload –&gt; 显示包内容；"></a>可解档出一文件夹 –&gt; Payload –&gt; 显示包内容；</h4><p><img src="http://ww3.sinaimg.cn/large/801b780agw1f6yp0d753tj20cn02a74j.jpg" alt="显示包内容.png"></p>
<h4 id="在该包内便有部分所需的素材；"><a href="#在该包内便有部分所需的素材；" class="headerlink" title="在该包内便有部分所需的素材；"></a>在该包内便有部分所需的素材；</h4><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp18adylj205e06pdgl.jpg" alt="包内容.png"></p>
<h4 id="但还有部分素材保存在-Assets-car-文件中，此时就可以用到刚才生成的-cartool-，抽取其中的素材；"><a href="#但还有部分素材保存在-Assets-car-文件中，此时就可以用到刚才生成的-cartool-，抽取其中的素材；" class="headerlink" title="但还有部分素材保存在 Assets.car 文件中，此时就可以用到刚才生成的 cartool ，抽取其中的素材；"></a>但还有部分素材保存在 Assets.car 文件中，此时就可以用到刚才生成的 cartool ，抽取其中的素材；</h4><p><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yp1sftbbj2048064zka.jpg" alt="Assets_car.png"></p>
<h4 id="打开终端-cd-到-cartool-所在的文件夹下，执行命令-cartool-Assets-car所在文件夹-存放素材的文件夹-，便可获得-Assets-car-中的素材。"><a href="#打开终端-cd-到-cartool-所在的文件夹下，执行命令-cartool-Assets-car所在文件夹-存放素材的文件夹-，便可获得-Assets-car-中的素材。" class="headerlink" title="打开终端 cd 到 cartool 所在的文件夹下，执行命令 ./cartool [Assets.car所在文件夹] [存放素材的文件夹] ，便可获得 Assets.car 中的素材。"></a>打开终端 cd 到 cartool 所在的文件夹下，执行命令 <code>./cartool [Assets.car所在文件夹] [存放素材的文件夹]</code> ，便可获得 Assets.car 中的素材。</h4><p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp2dca7xj20bl01mmxf.jpg" alt="cd_cartool.jpg"> </p>
<p><img src="http://ww2.sinaimg.cn/large/801b780agw1f6yp2u7i8jj205g07jmy1.jpg" alt="素材.png"></p>
<h4 id="获取的素材一般会带有-“iphone”-或者-“ipad”-，使用时需替换掉，因此需批量更改素材名，可用-Xcode-编写代码"><a href="#获取的素材一般会带有-“iphone”-或者-“ipad”-，使用时需替换掉，因此需批量更改素材名，可用-Xcode-编写代码" class="headerlink" title="获取的素材一般会带有 “iphone” 或者 “ipad” ，使用时需替换掉，因此需批量更改素材名，可用 Xcode 编写代码"></a>获取的素材一般会带有 “<del>iphone” 或者 “</del>ipad” ，使用时需替换掉，因此需批量更改素材名，可用 Xcode 编写代码</h4><figure class="highlight objc"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  素材文件夹路径（输入自己的）</span></span><br><span class="line">        <span class="built_in">NSString</span> *filePath = <span class="string">@"/Users/Joker/....../Images"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  获取文件管理者</span></span><br><span class="line">        <span class="built_in">NSFileManager</span> *manager = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  获取该文件夹下所有文件名</span></span><br><span class="line">        <span class="built_in">NSArray</span> *fileNames = [manager contentsOfDirectoryAtPath:filePath error:<span class="literal">nil</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  遍历文件名</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *fileName <span class="keyword">in</span> fileNames) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  为修改前的文件路径</span></span><br><span class="line">            <span class="built_in">NSString</span> *fromPath = [filePath stringByAppendingPathComponent:fileName];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  将“~iphone”替换为“”，最好用正则表达式，此处仅简单替换</span></span><br><span class="line">            <span class="built_in">NSString</span> *changeToName = [fileName stringByReplacingOccurrencesOfString:<span class="string">@"~iphone"</span> withString:<span class="string">@""</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  拼接该玩的文件名至路径</span></span><br><span class="line">            <span class="built_in">NSString</span> *toPath = [filePath stringByAppendingPathComponent:changeToName];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//  将素材移动至修改完的路径</span></span><br><span class="line">            [manager moveItemAtPath:fromPath toPath:toPath error:<span class="literal">nil</span>];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="利用插件"><a href="#利用插件" class="headerlink" title="利用插件"></a>利用插件</h3><p>有个大神写了个插件 <code>iOS Images Extractor</code> ，就是下面这个：<br><img src="http://ww4.sinaimg.cn/large/801b780agw1f6yp3j4sjaj203s03djrg.jpg" alt="iOS Images Extractor.png"></p>
<p>不过好像删除了，如果有需要的话下面是分享的下载地址。使用的话直接将 ipa 文件拖进去就可以。   </p>
<p><img src="http://ww1.sinaimg.cn/large/801b780agw1f6yp3x2y04j20go0cat9b.jpg" alt="插件界面"></p>
<p><a href="https://github.com/duiyueliu/iOS-Images-Extractor-master" target="_blank" rel="noopener">项目地址</a><br><a href="https://pan.baidu.com/s/1dFNrF4P" target="_blank" rel="noopener">插件地址</a></p>
<p><em>（注意，抽取的素材仅供学习，不要用于其他商业用途）</em></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tips</category>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Extract Images</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 Apple Configurator 2 获取 ipa</title>
    <url>/2021/06/10/get-ipa/</url>
    <content><![CDATA[<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul>
<li>手机已安装该应用</li>
<li>电脑安装 <a href="https://apps.apple.com/cn/app/apple-configurator-2/id1037126344?l=en&mt=12" target="_blank" rel="noopener">Apple Configurator 2</a></li>
</ul>
<a id="more"></a>

<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p><strong>1. 手机连接电脑并信任，打开 Apple Configurator 2；</strong></p>
<p><strong>2. 选中设备点击添加应用：</strong></p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/Screen%20Shot%202021-06-10%20at%2018.09.11.png" style="zoom:40%;" />

<p><strong>3. 选择需要获取的应用添加：</strong></p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610181040.png" style="zoom:33%;" />

<p><strong>4. 等待下载：</strong></p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610181138.png" style="zoom: 50%;" />

<p><strong>5. 下载成功提示已安装，不要操作：</strong></p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610181232.png" style="zoom:50%;" />

<p><strong>6. 打开下列文件夹：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ open ~/Library/Group\ Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets</span><br></pre></td></tr></table></figure>

<p>即可看到下载的 ipa：</p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610181336.png" style="zoom:50%;" />]]></content>
      <tags>
        <tag>ipa</tag>
      </tags>
  </entry>
  <entry>
    <title>git cherry-pick</title>
    <url>/2020/05/14/git-cherry-pick/</url>
    <content><![CDATA[<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514142423.png" alt=""></p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cherry-pick C3 C4 C7</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514142536.png" alt=""></p>
<p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用指令记录</title>
    <url>/2016/08/16/git-code/</url>
    <content><![CDATA[<h2 id="配置与帮助"><a href="#配置与帮助" class="headerlink" title="配置与帮助"></a>配置与帮助</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Git 配置信息</span></span><br><span class="line">$ git config -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 Git 配置文件</span></span><br><span class="line">$ git config -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改提交时的用户信息</span></span><br><span class="line">$ git config user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config user.email <span class="string">"[email]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有指令</span></span><br><span class="line">$ git <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某条指令，例如 config</span></span><br><span class="line">$ git config --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="版本库创建"><a href="#版本库创建" class="headerlink" title="版本库创建"></a>版本库创建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前文件夹初始化一个空的版本库，若已存在版本库则将其重新初始化</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录并初始化一个空的版本库</span></span><br><span class="line">$ git init [repo-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 ssh 从远程仓库克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:Coder-ZJQ/Test-Git.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 https 从远程仓库克隆</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/Coder-ZJQ/Test-Git.git</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个文件</span></span><br><span class="line">$ touch [file-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个文件夹</span></span><br><span class="line">$ mkdir [dir-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个文件</span></span><br><span class="line">$ cat [file-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑一个文件，编辑完成输入 ":wq" 保存退出</span></span><br><span class="line">$ vi [file-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工作区中已修改的文件，添加到暂存区（可多个文件）</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件夹下已修改的文件添加到暂存区（可多个文件夹）</span></span><br><span class="line">$ git add [dir1] [dir2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的所有已修改文件添加至暂存区</span></span><br><span class="line">$ git add ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区的文件，并将此次操作放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹下的所有文件，并将此次操作放入暂存区（并不会删除文件夹）</span></span><br><span class="line">$ git rm -r [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为文件改名，并将此次操作放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h2 id="修改管理"><a href="#修改管理" class="headerlink" title="修改管理"></a>修改管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前状态</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区的修改提交至当前分支</span></span><br><span class="line">$ git commit -m <span class="string">"[message]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区中的指定文件或文件夹添加到当前分支</span></span><br><span class="line">$ git commit [file] | [dir] ... -m <span class="string">"[message]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将修改或删除的文件直接提交至当前分支，跳过 add 步骤（新建文件还需先 add ）</span></span><br><span class="line">$ git commit -a -m <span class="string">"[message]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交一次新的 commit，重写 message</span></span><br><span class="line">$ git commit --amend -m <span class="string">"[message]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复修改至最近的一次 commit 或者 add，即放弃工作区中的修改</span></span><br><span class="line">$ git checkout [file] | [dir] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是已经将工作区的修改 add 至暂存区，可以先 reset 然后再 checkout</span></span><br><span class="line">$ git reset HEAD [file] | [dir] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若是已经 add 并且 commit，可以版本回退，撤销修改</span></span><br><span class="line">$ git reset --hard [commit-id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存当前工作区至工作栈</span></span><br><span class="line">$ git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工作栈栈顶的工作区，但并不会删除</span></span><br><span class="line">$ git stash apply</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作栈栈顶的工作区</span></span><br><span class="line">$ git stash drop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工作栈栈顶的工作区出栈：恢复工作区并删除</span></span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看工作栈中保存的工作区</span></span><br><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>

<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定 commit 创建一个分支</span></span><br><span class="line">$ git branch [branch-name] [commit-id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定 tag 创建一个分支</span></span><br><span class="line">$ git branch [branch-name] [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并追踪一个远程分支</span></span><br><span class="line">$ git branch --track [branch-name] [remote-branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在现有分支与指定的远程分支之间建立追踪关系</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch-name] [remote-branch-name]</span><br><span class="line">$ git branch -f --track <span class="built_in">test</span> [branch-name] [remote-branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的分支，并跳转至该分支</span></span><br><span class="line">$ git checkout -b [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并某分支至当前分支，默认是 Fast-forward 模式</span></span><br><span class="line">$ git merge [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote-branch]</span><br></pre></td></tr></table></figure>

<h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 SSH Key</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地关联远程版本库，并设置简称</span></span><br><span class="line">$ git remote add [remote-name] [remote-SSG | remote-URL]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程版本库代码更新至本地，但并不会执行合并操作</span></span><br><span class="line">$ git fetch [remote-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程版本库获取代码，并与本地分支合并</span></span><br><span class="line">$ git pull [remote-name] [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote-name] [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote-name] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote-name] --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程版本库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程版本库信息</span></span><br><span class="line">$ git remote show [remote-name]</span><br></pre></td></tr></table></figure>

<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有 tag </span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 tag 信息</span></span><br><span class="line">$ git show [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前 commit 新建一个 tag</span></span><br><span class="line">$ git tag [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在指定 commit 上新建一个 tag</span></span><br><span class="line">$ git tag [tag-name] [commit-id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 tag 并指定标签信息</span></span><br><span class="line">$ git tag -a [tag-name] -m <span class="string">"[message]"</span> [commit-id]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">$ git tag -d [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送本地标签至远程版本库</span></span><br><span class="line">$ git push [remote-name] [tag-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有尚未推送的本地标签至远程版本库</span></span><br><span class="line">$ git push [remote-name] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程版本库中的标签，先删除本地，再推送删除远程</span></span><br><span class="line">$ git tag -d [tag-name]</span><br><span class="line">$ git push [remote-name] :refs/tags/[tag-name]</span><br></pre></td></tr></table></figure>

<h2 id="信息查看"><a href="#信息查看" class="headerlink" title="信息查看"></a>信息查看</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure>
<hr>
<p> 参考资料：<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的官方网站 - Git 教程</a><br><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html?utm_source=tool.lu" target="_blank" rel="noopener">阮一峰 - 常用 Git 清单</a><br><a href="https://git-scm.com/docs" target="_blank" rel="noopener">git-scm</a></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>git rebase</title>
    <url>/2020/05/14/git-rebase/</url>
    <content><![CDATA[<h3 id="0-Rebase-Introduction"><a href="#0-Rebase-Introduction" class="headerlink" title="0. Rebase Introduction"></a>0. Rebase Introduction</h3><p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514112614.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b bugFix</span><br><span class="line"><span class="comment"># edit and add</span></span><br><span class="line">git commit</span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># edit and add</span></span><br><span class="line">git commit</span><br><span class="line">git checkout bugFix</span><br><span class="line">git rebase master</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514112519.png" alt=""></p>
<h3 id="1-Rebasing-over-9000-times"><a href="#1-Rebasing-over-9000-times" class="headerlink" title="1. Rebasing over 9000 times"></a>1. Rebasing over 9000 times</h3><p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514140400.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase master bugFix</span><br><span class="line">git rebase bugFix side</span><br><span class="line">git rebase side another</span><br><span class="line">git rebase another master</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514140248.png" alt=""></p>
<h3 id="2-Interactive-Rebase"><a href="#2-Interactive-Rebase" class="headerlink" title="2. Interactive Rebase"></a>2. Interactive Rebase</h3><p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514141649.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i overHere --solution-ordering C3,C5,C4</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20200514141738.png" alt=""></p>
<p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode 更改显示语言</title>
    <url>/2016/10/23/how-to-change-vscode-language/</url>
    <content><![CDATA[<h2 id="Configure-Language-指令"><a href="#Configure-Language-指令" class="headerlink" title="Configure Language 指令"></a>Configure Language 指令</h2><ol>
<li><code>shift</code> + <code>command</code> 唤出 <strong>Command Palette</strong></li>
<li>输入 <code>Configure Language</code> 确定</li>
<li>编辑 <code>locale.json</code> 文件<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义 VSCode 的显示语言。</span></span><br><span class="line">    <span class="comment">// 请参阅 https://go.microsoft.com/fwlink/?LinkId=761051，了解支持的语言列表。</span></span><br><span class="line">    <span class="comment">// 要更改值需要重启 VSCode。</span></span><br><span class="line">    <span class="attr">"locale"</span>:<span class="string">"en"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可选的语言环境"><a href="#可选的语言环境" class="headerlink" title="可选的语言环境"></a>可选的语言环境</h2></li>
</ol>
<table>
<thead>
<tr>
<th>Display Language</th>
<th>Locale</th>
</tr>
</thead>
<tbody><tr>
<td>English (US)</td>
<td><code>en</code></td>
</tr>
<tr>
<td>Simplified Chinese</td>
<td><code>zh-CN</code></td>
</tr>
<tr>
<td>Traditional Chinese</td>
<td><code>zh-TW</code></td>
</tr>
<tr>
<td>French</td>
<td><code>fr</code></td>
</tr>
<tr>
<td>German</td>
<td><code>de</code></td>
</tr>
<tr>
<td>Italian</td>
<td><code>it</code></td>
</tr>
<tr>
<td>Japanese</td>
<td><code>ja</code></td>
</tr>
<tr>
<td>Korean</td>
<td><code>ko</code></td>
</tr>
<tr>
<td>Russian</td>
<td><code>ru</code></td>
</tr>
<tr>
<td>Spanish</td>
<td><code>es</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tips</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 U 盘制作 Big Sur 系统盘</title>
    <url>/2021/06/10/install-macos-big-sur/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /Applications/Install\ macOS\ Big\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/YourVolume</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610013539.png" alt=""></p>
]]></content>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>brew 安装 Xcode 管理工具 xcodes 时报错</title>
    <url>/2021/06/09/install-xcodes-error/</url>
    <content><![CDATA[<p>brew 安装 <a href="https://github.com/RobotsAndPencils/XcodesApp" target="_blank" rel="noopener">xcodes</a> 时报错：<code>Error: Permission denied @ dir_s_mkdir - /usr/local/Caskroom/xcodes</code></p>
<a id="more"></a>

<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210609145808.png" alt=""></p>
<p>解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami):staff ~/Library/Caches/Homebrew /usr/<span class="built_in">local</span>/Caskroom/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 ipatool 下载 ipa 包</title>
    <url>/2021/07/14/ipatool/</url>
    <content><![CDATA[<h3 id="ipatool"><a href="#ipatool" class="headerlink" title="ipatool"></a>ipatool</h3><p><a href="https://github.com/majd/ipatool" target="_blank" rel="noopener">ipatool</a> 是一个命令行工具，可以让你搜索下载 <a href="https://apps.apple.com/" target="_blank" rel="noopener">App Store</a> 上的 iOS 应用。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew tap majd/repo</span><br><span class="line">$ brew install ipatool</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索应用，以 Apple 为例</span></span><br><span class="line">$ ipatool search -C CN Apple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据应用 ID 下载 ipa，以 com.apple.supportapp 为例</span></span><br><span class="line">$ ipatool download com.apple.supportapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看更多使用</span></span><br><span class="line">$ ipatool --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>如下图所示：</p>
<p><img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210714144116.png" alt=""></p>
]]></content>
      <tags>
        <tag>ipa</tag>
      </tags>
  </entry>
  <entry>
    <title>记录 swift 中的一些关键字及操作符</title>
    <url>/2021/07/15/swift-keyword-operator/</url>
    <content><![CDATA[<h4 id="Type-Alias"><a href="#Type-Alias" class="headerlink" title="Type Alias"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID327" target="_blank" rel="noopener">Type Alias</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">UInt16</span></span><br></pre></td></tr></table></figure>



<h4 id="Optional-Binding"><a href="#Optional-Binding" class="headerlink" title="Optional Binding"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID333" target="_blank" rel="noopener">Optional Binding</a></h4><ul>
<li><code>if let ... { ... }</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> constantName = someOptional &#123;</span><br><span class="line">  <span class="comment">// statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>while let ... { ... }</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">let</span> constantName = someOptional &#123;</span><br><span class="line">  <span class="comment">// statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="Early-Exit"><a href="#Early-Exit" class="headerlink" title="Early Exit"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID525" target="_blank" rel="noopener">Early Exit</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> constantName = someOptional &#123;</span><br><span class="line">  <span class="comment">// statements</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Debugging-with-Assertions"><a href="#Debugging-with-Assertions" class="headerlink" title="Debugging with Assertions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID336" target="_blank" rel="noopener">Debugging with Assertions</a></h4><ul>
<li><code>assert(...)</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = -<span class="number">3</span></span><br><span class="line"><span class="built_in">assert</span>(age &gt;= <span class="number">0</span>, <span class="string">"A person's age can't be less than zero."</span>)</span><br><span class="line"><span class="comment">// This assertion fails because -3 isn't &gt;= 0.</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>assertionFailure(...)</code>(<a href=""></a>)</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> age &gt; <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You can ride the roller-coaster or the ferris wheel."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> age &gt;= <span class="number">0</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"You can ride the ferris wheel."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">assertionFailure</span>(<span class="string">"A person's age can't be less than zero."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Enforcing-Preconditions"><a href="#Enforcing-Preconditions" class="headerlink" title="Enforcing Preconditions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID554" target="_blank" rel="noopener">Enforcing Preconditions</a></h4><ul>
<li><code>precondition(...)</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In the implementation of a subscript...</span></span><br><span class="line"><span class="built_in">precondition</span>(index &gt; <span class="number">0</span>, <span class="string">"Index must be greater than zero."</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>preconditionFailure(...)</code></li>
</ul>
<h4 id="Fatal-Error"><a href="#Fatal-Error" class="headerlink" title="Fatal Error"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/TheBasics.html#ID554" target="_blank" rel="noopener">Fatal Error</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fatalError</span>(<span class="string">"Unimplemented"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Fallthrough"><a href="#Fallthrough" class="headerlink" title="Fallthrough"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID140" target="_blank" rel="noopener">Fallthrough</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> integerToDescribe = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> description = <span class="string">"The number \(integerToDescribe) is"</span></span><br><span class="line"><span class="keyword">switch</span> integerToDescribe &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>:</span><br><span class="line">    description += <span class="string">" a prime number, and also"</span></span><br><span class="line">    <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    description += <span class="string">" an integer."</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(description)</span><br><span class="line"><span class="comment">// Prints "The number 5 is a prime number, and also an integer."</span></span><br></pre></td></tr></table></figure>



<h4 id="where-in-switch"><a href="#where-in-switch" class="headerlink" title="where in switch"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID134" target="_blank" rel="noopener">where in switch</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> yetAnotherPoint = (<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="keyword">switch</span> yetAnotherPoint &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is on the line x == y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == -y:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is on the line x == -y"</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"(\(x), \(y)) is just some arbitrary point"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints "(1, -1) is on the line x == -y"</span></span><br></pre></td></tr></table></figure>



<h4 id="Labeled-Statements"><a href="#Labeled-Statements" class="headerlink" title="Labeled Statements"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141" target="_blank" rel="noopener">Labeled Statements</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">gameLoop: <span class="keyword">while</span> square != finalSquare &#123;</span><br><span class="line">    diceRoll += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> diceRoll == <span class="number">7</span> &#123; diceRoll = <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">switch</span> square + diceRoll &#123;</span><br><span class="line">    <span class="keyword">case</span> finalSquare:</span><br><span class="line">        <span class="comment">// diceRoll will move us to the final square, so the game is over</span></span><br><span class="line">        <span class="keyword">break</span> gameLoop</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> newSquare <span class="keyword">where</span> newSquare &gt; finalSquare:</span><br><span class="line">        <span class="comment">// diceRoll will move us beyond the final square, so roll again</span></span><br><span class="line">        <span class="keyword">continue</span> gameLoop</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// this is a valid move, so find out its effect</span></span><br><span class="line">        square += diceRoll</span><br><span class="line">        square += board[square]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Game over!"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Checking-API-Availability"><a href="#Checking-API-Availability" class="headerlink" title="Checking API Availability"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID523" target="_blank" rel="noopener">Checking API Availability</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">10</span>, macOS <span class="number">10.12</span>, *) &#123;</span><br><span class="line">    <span class="comment">// Use iOS 10 APIs on iOS, and use macOS 10.12 APIs on macOS</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fall back to earlier iOS and macOS APIs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Variadic-Parameters"><a href="#Variadic-Parameters" class="headerlink" title="Variadic Parameters"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID171" target="_blank" rel="noopener">Variadic Parameters</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">arithmeticMean</span><span class="params">(<span class="number">_</span> numbers: Double...)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total: <span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        total += number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total / <span class="type">Double</span>(numbers.<span class="built_in">count</span>)</span><br><span class="line">&#125;</span><br><span class="line">arithmeticMean(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// returns 3.0, which is the arithmetic mean of these five numbers</span></span><br><span class="line">arithmeticMean(<span class="number">3</span>, <span class="number">8.25</span>, <span class="number">18.75</span>)</span><br><span class="line"><span class="comment">// returns 10.0, which is the arithmetic mean of these three numbers</span></span><br></pre></td></tr></table></figure>



<h4 id="In-Out-Parameters"><a href="#In-Out-Parameters" class="headerlink" title="In-Out Parameters"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID173" target="_blank" rel="noopener">In-Out Parameters</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInts</span><span class="params">(<span class="number">_</span> a: <span class="keyword">inout</span> Int, <span class="number">_</span> b: <span class="keyword">inout</span> Int)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> temporaryA = a</span><br><span class="line">    a = b</span><br><span class="line">    b = temporaryA</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someInt = <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> anotherInt = <span class="number">107</span></span><br><span class="line">swapTwoInts(&amp;someInt, &amp;anotherInt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"someInt is now \(someInt), and anotherInt is now \(anotherInt)"</span>)</span><br><span class="line"><span class="comment">// Prints "someInt is now 107, and anotherInt is now 3"</span></span><br></pre></td></tr></table></figure>



<h4 id="Escaping-Closures"><a href="#Escaping-Closures" class="headerlink" title="Escaping Closures"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID546" target="_blank" rel="noopener">Escaping Closures</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> completionHandlers: [() -&gt; <span class="type">Void</span>] = []</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someFunctionWithEscapingClosure</span><span class="params">(completionHandler: @escaping <span class="params">()</span></span></span> -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    completionHandlers.append(completionHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Autoclosures"><a href="#Autoclosures" class="headerlink" title="Autoclosures"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html#ID543" target="_blank" rel="noopener">Autoclosures</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// customersInLine is ["Ewa", "Barry", "Daniella"]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">serve</span><span class="params">(customer customerProvider: @autoclosure <span class="params">()</span></span></span> -&gt; <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Now serving \(customerProvider())!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">serve(customer: customersInLine.remove(at: <span class="number">0</span>))</span><br><span class="line"><span class="comment">// Prints "Now serving Ewa!"</span></span><br></pre></td></tr></table></figure>



<h4 id="mutating"><a href="#mutating" class="headerlink" title="mutating"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID239" target="_blank" rel="noopener">mutating</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">someFunction</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span>: <span class="title">SomeProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someVariable = <span class="number">1</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">someFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        someVariable = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>: <span class="title">SomeProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> someVariable = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">someFunction</span><span class="params">()</span></span> &#123;</span><br><span class="line">        someVariable = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">moveBy</span><span class="params">(x deltaX: Double, y deltaY: Double)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span> = <span class="type">Point</span>(x: x + deltaX, y: y + deltaY)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TriStateSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> off, low, high</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">next</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .off:</span><br><span class="line">            <span class="keyword">self</span> = .low</span><br><span class="line">        <span class="keyword">case</span> .low:</span><br><span class="line">            <span class="keyword">self</span> = .high</span><br><span class="line">        <span class="keyword">case</span> .high:</span><br><span class="line">            <span class="keyword">self</span> = .off</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ovenLight = <span class="type">TriStateSwitch</span>.low</span><br><span class="line">ovenLight.next()</span><br><span class="line"><span class="comment">// ovenLight is now equal to .high</span></span><br><span class="line">ovenLight.next()</span><br><span class="line"><span class="comment">// ovenLight is now equal to .off</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Notice the use of the <code>mutating</code> keyword in the declaration of <code>SomeStructure</code> to mark a method that modifies the structure. The declaration of <code>SomeClass</code> doesn’t need any of its methods marked as mutating because methods on a class can always modify the class.</p>
</blockquote>
<h4 id="Recursive-Enumerations"><a href="#Recursive-Enumerations" class="headerlink" title="Recursive Enumerations"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID536" target="_blank" rel="noopener">Recursive Enumerations</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enable indirection for all of the enumeration’s cases</span></span><br><span class="line"><span class="keyword">indirect</span> <span class="class"><span class="keyword">enum</span> <span class="title">ArithmeticExpression</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Identity-Operators"><a href="#Identity-Operators" class="headerlink" title="Identity Operators"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ClassesAndStructures.html#ID90" target="_blank" rel="noopener">Identity Operators</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> tenEighty === alsoTenEighty &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"tenEighty and alsoTenEighty refer to the same VideoMode instance."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints "tenEighty and alsoTenEighty refer to the same VideoMode instance."</span></span><br></pre></td></tr></table></figure>



<h4 id="Lazy-Stored-Properties"><a href="#Lazy-Stored-Properties" class="headerlink" title="Lazy Stored Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID257" target="_blank" rel="noopener">Lazy Stored Properties</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataImporter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    DataImporter is a class to import data from an external file.</span></span><br><span class="line"><span class="comment">    The class is assumed to take a nontrivial amount of time to initialize.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> filename = <span class="string">"data.txt"</span></span><br><span class="line">    <span class="comment">// the DataImporter class would provide data importing functionality here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataManager</span> </span>&#123;</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> importer = <span class="type">DataImporter</span>()</span><br><span class="line">    <span class="keyword">var</span> data: [<span class="type">String</span>] = []</span><br><span class="line">    <span class="comment">// the DataManager class would provide data management functionality here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> manager = <span class="type">DataManager</span>()</span><br><span class="line">manager.data.append(<span class="string">"Some data"</span>)</span><br><span class="line">manager.data.append(<span class="string">"Some more data"</span>)</span><br><span class="line"><span class="comment">// the DataImporter instance for the importer property hasn't yet been created</span></span><br></pre></td></tr></table></figure>



<h4 id="Computed-Properties"><a href="#Computed-Properties" class="headerlink" title="Computed Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID259" target="_blank" rel="noopener">Computed Properties</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0.0</span>, y = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Size</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span>, height = <span class="number">0.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> origin = <span class="type">Point</span>()</span><br><span class="line">    <span class="keyword">var</span> size = <span class="type">Size</span>()</span><br><span class="line">    <span class="keyword">var</span> center: <span class="type">Point</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> centerX = origin.x + (size.width / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">let</span> centerY = origin.y + (size.height / <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Point</span>(x: centerX, y: centerY)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newCenter) &#123;</span><br><span class="line">            origin.x = newCenter.x - (size.width / <span class="number">2</span>)</span><br><span class="line">            origin.y = newCenter.y - (size.height / <span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> square = <span class="type">Rect</span>(origin: <span class="type">Point</span>(x: <span class="number">0.0</span>, y: <span class="number">0.0</span>),</span><br><span class="line">                  size: <span class="type">Size</span>(width: <span class="number">10.0</span>, height: <span class="number">10.0</span>))</span><br><span class="line"><span class="keyword">let</span> initialSquareCenter = square.center</span><br><span class="line">square.center = <span class="type">Point</span>(x: <span class="number">15.0</span>, y: <span class="number">15.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"square.origin is now at (\(square.origin.x), \(square.origin.y))"</span>)</span><br><span class="line"><span class="comment">// Prints "square.origin is now at (10.0, 10.0)"</span></span><br></pre></td></tr></table></figure>



<h4 id="Read-Only-Computed-Properties"><a href="#Read-Only-Computed-Properties" class="headerlink" title="Read-Only Computed Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID261" target="_blank" rel="noopener">Read-Only Computed Properties</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cuboid</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = <span class="number">0.0</span>, height = <span class="number">0.0</span>, depth = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> volume: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height * depth</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fourByFiveByTwo = <span class="type">Cuboid</span>(width: <span class="number">4.0</span>, height: <span class="number">5.0</span>, depth: <span class="number">2.0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"the volume of fourByFiveByTwo is \(fourByFiveByTwo.volume)"</span>)</span><br><span class="line"><span class="comment">// Prints "the volume of fourByFiveByTwo is 40.0"</span></span><br></pre></td></tr></table></figure>



<h4 id="Property-Observers"><a href="#Property-Observers" class="headerlink" title="Property Observers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID262" target="_blank" rel="noopener">Property Observers</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StepCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> totalSteps: <span class="type">Int</span> = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span>(newTotalSteps) &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"About to set totalSteps to \(newTotalSteps)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> totalSteps &gt; oldValue  &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"Added \(totalSteps - oldValue) steps"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> stepCounter = <span class="type">StepCounter</span>()</span><br><span class="line">stepCounter.totalSteps = <span class="number">200</span></span><br><span class="line"><span class="comment">// About to set totalSteps to 200</span></span><br><span class="line"><span class="comment">// Added 200 steps</span></span><br><span class="line">stepCounter.totalSteps = <span class="number">360</span></span><br><span class="line"><span class="comment">// About to set totalSteps to 360</span></span><br><span class="line"><span class="comment">// Added 160 steps</span></span><br><span class="line">stepCounter.totalSteps = <span class="number">896</span></span><br><span class="line"><span class="comment">// About to set totalSteps to 896</span></span><br><span class="line"><span class="comment">// Added 536 steps</span></span><br></pre></td></tr></table></figure>



<h4 id="Property-Wrappers"><a href="#Property-Wrappers" class="headerlink" title="Property Wrappers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617" target="_blank" rel="noopener">Property Wrappers</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TwelveOrLess</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> number &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; number = <span class="built_in">min</span>(newValue, <span class="number">12</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SmallRectangle</span> </span>&#123;</span><br><span class="line">    @<span class="type">TwelveOrLess</span> <span class="keyword">var</span> height: <span class="type">Int</span></span><br><span class="line">    @<span class="type">TwelveOrLess</span> <span class="keyword">var</span> width: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rectangle = <span class="type">SmallRectangle</span>()</span><br><span class="line"><span class="built_in">print</span>(rectangle.height)</span><br><span class="line"><span class="comment">// Prints "0"</span></span><br><span class="line"></span><br><span class="line">rectangle.height = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(rectangle.height)</span><br><span class="line"><span class="comment">// Prints "10"</span></span><br><span class="line"></span><br><span class="line">rectangle.height = <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(rectangle.height)</span><br><span class="line"><span class="comment">// Prints "12"</span></span><br></pre></td></tr></table></figure>



<h4 id="Projecting-a-Value-From-a-Property-Wrapper"><a href="#Projecting-a-Value-From-a-Property-Wrapper" class="headerlink" title="Projecting a Value From a Property Wrapper"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID619" target="_blank" rel="noopener">Projecting a Value From a Property Wrapper</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="meta">@propertyWrapper</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SmallNumber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> projectedValue = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">var</span> wrappedValue: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> number &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> newValue &gt; <span class="number">12</span> &#123;</span><br><span class="line">                number = <span class="number">12</span></span><br><span class="line">                projectedValue = <span class="literal">true</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                number = newValue</span><br><span class="line">                projectedValue = <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span> </span>&#123;</span><br><span class="line">    @<span class="type">SmallNumber</span> <span class="keyword">var</span> someNumber: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someStructure = <span class="type">SomeStructure</span>()</span><br><span class="line"></span><br><span class="line">someStructure.someNumber = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(someStructure.$someNumber)</span><br><span class="line"><span class="comment">// Prints "false"</span></span><br><span class="line"></span><br><span class="line">someStructure.someNumber = <span class="number">55</span></span><br><span class="line"><span class="built_in">print</span>(someStructure.$someNumber)</span><br><span class="line"><span class="comment">// Prints "true"</span></span><br></pre></td></tr></table></figure>



<h4 id="Type-Properties"><a href="#Type-Properties" class="headerlink" title="Type Properties"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID264" target="_blank" rel="noopener">Type Properties</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SomeStructure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SomeEnumeration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> storedTypeProperty = <span class="string">"Some value."</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> computedTypeProperty: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">27</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">overrideableComputedTypeProperty</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">107</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Type-Methods"><a href="#Type-Methods" class="headerlink" title="Type Methods"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Methods.html#ID241" target="_blank" rel="noopener">Type Methods</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">someTypeMethod</span>() </span>&#123;</span><br><span class="line">        <span class="comment">// type method implementation goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">SomeClass</span>.someTypeMethod()</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LevelTracker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> highestUnlockedLevel = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> currentLevel = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">unlock</span><span class="params">(<span class="number">_</span> level: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> level &gt; highestUnlockedLevel &#123; highestUnlockedLevel = level &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">isUnlocked</span><span class="params">(<span class="number">_</span> level: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> level &lt;= highestUnlockedLevel</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@discardableResult</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">advance</span><span class="params">(to level: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="type">LevelTracker</span>.isUnlocked(level) &#123;</span><br><span class="line">            currentLevel = level</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html#attributes" target="_blank" rel="noopener">@discardableResult</a></h4><blockquote>
<p>The <code>discardableResult</code> attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.</p>
</blockquote>
<h4 id="Subscript-Syntax"><a href="#Subscript-Syntax" class="headerlink" title="Subscript Syntax"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html#ID306" target="_blank" rel="noopener">Subscript Syntax</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rows: <span class="type">Int</span>, columns: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> grid: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">init</span>(rows: <span class="type">Int</span>, columns: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.rows = rows</span><br><span class="line">        <span class="keyword">self</span>.columns = columns</span><br><span class="line">        grid = <span class="type">Array</span>(repeating: <span class="number">0.0</span>, <span class="built_in">count</span>: rows * columns)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">indexIsValid</span><span class="params">(row: Int, column: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; column &gt;= <span class="number">0</span> &amp;&amp; column &lt; columns</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(row: <span class="type">Int</span>, column: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">assert</span>(indexIsValid(row: row, column: column), <span class="string">"Index out of range"</span>)</span><br><span class="line">            <span class="keyword">return</span> grid[(row * columns) + column]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">assert</span>(indexIsValid(row: row, column: column), <span class="string">"Index out of range"</span>)</span><br><span class="line">            grid[(row * columns) + column] = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matrix = <span class="type">Matrix</span>(rows: <span class="number">2</span>, columns: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">matrix[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">1.5</span></span><br><span class="line">matrix[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">3.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> someValue = matrix[<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment">// This triggers an assert, because [2, 2] is outside of the matrix bounds.</span></span><br></pre></td></tr></table></figure>



<h4 id="Type-Subscripts"><a href="#Type-Subscripts" class="headerlink" title="Type Subscripts"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Subscripts.html#ID609" target="_blank" rel="noopener">Type Subscripts</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Planet</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> mercury = <span class="number">1</span>, venus, earth, mars, jupiter, saturn, uranus, neptune</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">subscript</span>(n: <span class="type">Int</span>) -&gt; <span class="type">Planet</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Planet</span>(rawValue: n)!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mars = <span class="type">Planet</span>[<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(mars)</span><br></pre></td></tr></table></figure>



<h4 id="Overriding"><a href="#Overriding" class="headerlink" title="Overriding"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID196" target="_blank" rel="noopener">Overriding</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Train</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Choo Choo"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>: <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gear = <span class="number">1</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> description: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.description + <span class="string">" in gear \(gear)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutomaticCar</span>: <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> currentSpeed: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            gear = <span class="type">Int</span>(currentSpeed / <span class="number">10.0</span>) + <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Preventing-Overrides"><a href="#Preventing-Overrides" class="headerlink" title="Preventing Overrides"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Inheritance.html#ID202" target="_blank" rel="noopener">Preventing Overrides</a></h4><ul>
<li><code>final var</code></li>
<li><code>final func</code></li>
<li><code>final class func</code></li>
<li><code>final subscript</code></li>
<li><code>final class</code></li>
</ul>
<h4 id="Convenience-Initializers"><a href="#Convenience-Initializers" class="headerlink" title="Convenience Initializers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID218" target="_blank" rel="noopener">Convenience Initializers</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(parameters) &#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Required-Initializers"><a href="#Required-Initializers" class="headerlink" title="Required Initializers"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID231" target="_blank" rel="noopener">Required Initializers</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="comment">// initializer implementation goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeSubclass</span>: <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="comment">// subclass implementation of the required initializer goes here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Setting-a-Default-Property-Value-with-a-Closure-or-Function"><a href="#Setting-a-Default-Property-Value-with-a-Closure-or-Function" class="headerlink" title="Setting a Default Property Value with a Closure or Function"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/Initialization.html#ID232" target="_blank" rel="noopener">Setting a Default Property Value with a Closure or Function</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> someProperty: <span class="type">SomeType</span> = &#123;</span><br><span class="line">        <span class="comment">// create a default value for someProperty inside this closure</span></span><br><span class="line">        <span class="comment">// someValue must be of the same type as SomeType</span></span><br><span class="line">        <span class="keyword">return</span> someValue</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Representing-and-Throwing-Errors"><a href="#Representing-and-Throwing-Errors" class="headerlink" title="Representing and Throwing Errors"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID509" target="_blank" rel="noopener">Representing and Throwing Errors</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">VendingMachineError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> invalidSelection</span><br><span class="line">    <span class="keyword">case</span> insufficientFunds(coinsNeeded: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> outOfStock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="type">VendingMachineError</span>.insufficientFunds(coinsNeeded: <span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Propagating-Errors-Using-Throwing-Functions"><a href="#Propagating-Errors-Using-Throwing-Functions" class="headerlink" title="Propagating Errors Using Throwing Functions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID510" target="_blank" rel="noopener">Propagating Errors Using Throwing Functions</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canThrowErrors</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> ... &#123;</span><br><span class="line">        <span class="keyword">throw</span> ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Handling-Errors-Using-Do-Catch"><a href="#Handling-Errors-Using-Do-Catch" class="headerlink" title="Handling Errors Using Do-Catch"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID541" target="_blank" rel="noopener">Handling Errors Using Do-Catch</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> canThrowAnError()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">// an error was thrown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Converting-Errors-to-Optional-Values"><a href="#Converting-Errors-to-Optional-Values" class="headerlink" title="Converting Errors to Optional Values"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID542" target="_blank" rel="noopener">Converting Errors to Optional Values</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">someThrowingFunction</span><span class="params">()</span></span> <span class="keyword">throws</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">try</span>? someThrowingFunction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y: <span class="type">Int?</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    y = <span class="keyword">try</span> someThrowingFunction()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    y = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Disabling-Error-Propagation"><a href="#Disabling-Error-Propagation" class="headerlink" title="Disabling Error Propagation"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID513" target="_blank" rel="noopener">Disabling Error Propagation</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> photo = <span class="keyword">try</span>! loadImage(atPath: <span class="string">"./Resources/John Appleseed.jpg"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Specifying-Cleanup-Actions"><a href="#Specifying-Cleanup-Actions" class="headerlink" title="Specifying Cleanup Actions"></a><a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html#ID514" target="_blank" rel="noopener">Specifying Cleanup Actions</a></h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">processFile</span><span class="params">(filename: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> exists(filename) &#123;</span><br><span class="line">        <span class="keyword">let</span> file = <span class="keyword">open</span>(filename)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            close(file)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> line = <span class="keyword">try</span> file.readline() &#123;</span><br><span class="line">            <span class="comment">// Work with the file.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// close(file) is called here, at the end of the scope.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title>fork 同步</title>
    <url>/2020/05/13/syncing-a-fork/</url>
    <content><![CDATA[<h3 id="Configuring-a-remote-for-a-fork"><a href="#Configuring-a-remote-for-a-fork" class="headerlink" title="Configuring a remote for a fork"></a><a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/configuring-a-remote-for-a-fork" target="_blank" rel="noopener">Configuring a remote for a fork</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</span><br></pre></td></tr></table></figure>

<h3 id="Syncing-a-fork"><a href="#Syncing-a-fork" class="headerlink" title="Syncing a fork"></a><a href="https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork" target="_blank" rel="noopener">Syncing a fork</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch upstream</span><br><span class="line">git checkout master</span><br><span class="line">git merge upstream/master</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>fork</tag>
      </tags>
  </entry>
  <entry>
    <title>删除通过 pkg 安装包安装的 Python</title>
    <url>/2021/06/09/uninstall-python/</url>
    <content><![CDATA[<p>下面以 Python 3.7 版本为例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 Python 3.7 安装路径下的所有文件</span></span><br><span class="line">$ sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除程序文件夹中所有 Python 3.7 相关文件</span></span><br><span class="line">$ sudo rm -rf /Applications/Python\ 3.7/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Python 3.7相关的文件和链接并删除</span></span><br><span class="line">$ ls -l /usr/<span class="built_in">local</span>/bin/p*</span><br><span class="line">$ rm <span class="string">"Python 3.7相关的文件和链接"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除配置文件（下面以 .bash_profile 为例）中 Python 3.7 相关环境变量</span></span><br><span class="line">$ vi ~/.bash_profile</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>类似如下：</p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210609164115.png" style="zoom: 50%;" />

]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 操作笔记</title>
    <url>/2021/06/10/vim/</url>
    <content><![CDATA[<h3 id="vimtutor"><a href="#vimtutor" class="headerlink" title="vimtutor"></a>vimtutor</h3><p>可以在终端执行 <code>vimtutor</code> 进入教程，如图所示：</p>
<img src="https://gitee.com/coder-zjq/ImageHost/raw/master/jokerz.me/20210610132442.png" style="zoom:50%;" />

<a id="more"></a>

<h3 id="移动操作"><a href="#移动操作" class="headerlink" title="移动操作"></a>移动操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">左下上右移动光标</td>
<td align="center">h, j, k, l</td>
</tr>
<tr>
<td align="center">以单词为单位移动光标</td>
<td align="center">2w</td>
</tr>
<tr>
<td align="center">以单词为单位移动光标至单词末尾</td>
<td align="center">2e</td>
</tr>
<tr>
<td align="center">移动光标至行首</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">移动光标至文本首行</td>
<td align="center">G</td>
</tr>
<tr>
<td align="center">移动光标至文本末行</td>
<td align="center">gg</td>
</tr>
<tr>
<td align="center">移动光标至指定行数</td>
<td align="center">233G</td>
</tr>
<tr>
<td align="center">移动光标至匹配的 ), ], }</td>
<td align="center">%</td>
</tr>
</tbody></table>
<h3 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">在光标处插入文本</td>
<td align="center">i</td>
</tr>
<tr>
<td align="center">在行尾追加字符</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center">在词尾追加字符</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">删除光标后字符</td>
<td align="center">x</td>
</tr>
<tr>
<td align="center">从光标开始删除至下一单词前</td>
<td align="center">dw</td>
</tr>
<tr>
<td align="center">删除光标后所有文本</td>
<td align="center">d$</td>
</tr>
<tr>
<td align="center">从光标开始删除至单词末尾</td>
<td align="center">de</td>
</tr>
<tr>
<td align="center">以单词为单位从光标开始删除至指定数量单词前</td>
<td align="center">d2w</td>
</tr>
<tr>
<td align="center">以单词为单位从光标开始删除至指定数量单词末尾</td>
<td align="center">d2e</td>
</tr>
<tr>
<td align="center">删除当前整行</td>
<td align="center">dd</td>
</tr>
<tr>
<td align="center">删除指定行数</td>
<td align="center">2dd</td>
</tr>
<tr>
<td align="center">移动删除行文本至光标下一行</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">替换光标处字符</td>
<td align="center">rx</td>
</tr>
<tr>
<td align="center">替换光标后多个字符</td>
<td align="center">R</td>
</tr>
<tr>
<td align="center">从光标开始删除至指定数量单词末尾，并进入<code>INSERT</code>模式</td>
<td align="center">ce</td>
</tr>
<tr>
<td align="center">从光标开始删除至行末，并进入<code>INSERT</code>模式</td>
<td align="center">c$</td>
</tr>
<tr>
<td align="center">从光标开始删除至指定数量单词前，并进入<code>INSERT</code>模式</td>
<td align="center">c2w</td>
</tr>
<tr>
<td align="center">在光标下新增一行并进入 <code>INSERT</code> 模式</td>
<td align="center">o</td>
</tr>
<tr>
<td align="center">在光标上新增一行并进入 <code>INSERT</code> 模式</td>
<td align="center">O</td>
</tr>
<tr>
<td align="center">复制选中文本</td>
<td align="center">v    y</td>
</tr>
<tr>
<td align="center">粘贴复制文本</td>
<td align="center">p</td>
</tr>
</tbody></table>
<h3 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a>搜索操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">搜索</td>
<td align="center"><code>/search_word</code>    &lt;ENTER&gt; <br /><code>(n 跳转至下一个，N 跳转至上一个)</code></td>
</tr>
<tr>
<td align="center">反方向搜索</td>
<td align="center"><code>?search_word</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">搜索当前行并替换首个匹配文本</td>
<td align="center"><code>:s/old/new</code></td>
</tr>
<tr>
<td align="center">搜索当前行并替换所有匹配文本</td>
<td align="center"><code>:s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索指定行范围并替换所有匹配文本</td>
<td align="center"><code>:#,#s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索整个文件并替换所有匹配文本</td>
<td align="center"><code>:%s/old/new/g</code></td>
</tr>
<tr>
<td align="center">搜索整个文件并可选择是否替换文本</td>
<td align="center"><code>:%s/old/new/gc</code></td>
</tr>
<tr>
<td align="center">搜索时忽略大小写</td>
<td align="center"><code>:set ic</code></td>
</tr>
<tr>
<td align="center">搜索结果高亮显示</td>
<td align="center"><code>:set hls</code></td>
</tr>
<tr>
<td align="center">搜索时一边输入一边显示效果</td>
<td align="center"><code>:set is</code></td>
</tr>
<tr>
<td align="center">关闭上述设置（添加 no 前缀）</td>
<td align="center"><code>:set noic nohls nois</code></td>
</tr>
</tbody></table>
<p><code>(ic: ignorecase, hls: hlsearch, is: incsearch)</code></p>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">退出 vim（未修改时）</td>
<td align="center">&lt;ESC&gt;     <code>:q</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">强制退出 vim（放弃修改）</td>
<td align="center">&lt;ESC&gt;     <code>:q!</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">保存文件并退出</td>
<td align="center">&lt;ESC&gt;    <code>:wq</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">查看光标及文件状态</td>
<td align="center">CTRL-G</td>
</tr>
<tr>
<td align="center">另存为</td>
<td align="center"><code>:w FILENAME</code></td>
</tr>
<tr>
<td align="center">选择文本另存为</td>
<td align="center">v    <code>:&#39;&lt;,&#39;&gt;w FILENAME:</code></td>
</tr>
<tr>
<td align="center">插入其它文件文本</td>
<td align="center"><code>:r FINENAME</code></td>
</tr>
</tbody></table>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">返回 <code>NORMAL</code> 模式</td>
<td align="center">ESC</td>
</tr>
<tr>
<td align="center">进入 <code>VISUAL</code> 模式</td>
<td align="center">v</td>
</tr>
<tr>
<td align="center">撤回上一个操作</td>
<td align="center">u</td>
</tr>
<tr>
<td align="center">撤回当前行所有编辑操作</td>
<td align="center">U</td>
</tr>
<tr>
<td align="center">撤回撤回操作</td>
<td align="center">CTRL-R</td>
</tr>
<tr>
<td align="center">执行外部指令（以 pwd 为例）</td>
<td align="center"><code>:!pwd</code>    &lt;ENTER&gt;</td>
</tr>
<tr>
<td align="center">插入指令输出文本（以 pwd 为例）</td>
<td align="center"><code>:r !pwd</code></td>
</tr>
<tr>
<td align="center">查看帮助信息</td>
<td align="center">&lt;HELP&gt; / &lt;F1&gt; / <code>:help</code></td>
</tr>
<tr>
<td align="center">查看相关帮助信息</td>
<td align="center"><code>:help w</code><br /><code>:help c_CTRL-D</code><br /><code>:help insert-index</code><br /><code>:help user-manual</code><br /><code>:help vimrc-intro</code></td>
</tr>
<tr>
<td align="center">关闭兼容模式</td>
<td align="center"><code>:set nocp</code></td>
</tr>
<tr>
<td align="center">切换窗口</td>
<td align="center">CTRL-W</td>
</tr>
<tr>
<td align="center">指令提示</td>
<td align="center">CTRL-D</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn Installation</title>
    <url>/2016/10/13/yarn-installation/</url>
    <content><![CDATA[<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><h3 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h3><p>你可以通过 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew package manager</a>，这同时会安装 Node.js 如果没有安装的话。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install yarn</span><br></pre></td></tr></table></figure>

<h3 id="设置-Path-环境变量"><a href="#设置-Path-环境变量" class="headerlink" title="设置 Path 环境变量"></a>设置 Path 环境变量</h3><p>你需要通过你的终端设置 <code>Path</code> 环境变量，使 Yarn 的执行包可以全局访问。</p>
<p>在你的配置文件（可能是你的 <code>.profile</code>,<code>.bashrc</code>,<code>.zshrc</code>文件，等等。）里加入 <code>export PATH=&quot;$PATH:yarn global bin&quot;</code></p>
<a id="more"></a>

<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在 Windows 上有两种可选的方式来安装 Yarn。</p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>下载安装包你会得到一个 <code>.msi</code> 文件，运行该文件会指引你安装 Yarn。</p>
<p>如果你通过安装包安装，你需先安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。</p>
<p><a style="color:white; background-color:#2c8ebb; border-color:#2c8ebb; display: inline-block; font-weight: normal; line-height: 1.25;text-align: center; white-space: nowrap; vertical-align: middle; cursor: pointer; user-select: none; border: 1px solid transparent;  padding: .5rem 1rem; font-size: 1rem;  border-radius: .25rem;" href="https://yarnpkg.com/latest.msi" target="_blank" rel="noopener">点击下载安装包</a></p>
<h3 id="通过-Chocolatey-安装"><a href="#通过-Chocolatey-安装" class="headerlink" title="通过 Chocolatey 安装"></a>通过 Chocolatey 安装</h3><p><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a> 是 Windows 上的包管理工具，你可以通过<a href="https://chocolatey.org/install" target="_blank" rel="noopener">这里的指示</a>安装 Chocolatey.</p>
<p>如果你已经安装了 Chocolatey，你可以通过在你的命令行你运行如下代码来安装 Yarn:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">choco install yarn</span><br></pre></td></tr></table></figure>

<p>这同样得确保你已经安装了 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>.</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>你需要清空你的文件夹以及防病毒软件里的 Yarn 缓存目录（ %LocalAppData%\Yarn ） ，否则安装包时会特别慢，因为每个文件在写入硬盘时都会被扫描。</p>
<hr>
<p>可以在终端运行如下命令测试 Yarn 是否已安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn --version</span><br></pre></td></tr></table></figure>

<p>安装成功的话则会显示 Yarn 安装的版本信息：</p>
<p><img src="http://ofsuv8s64.bkt.clouddn.com/blog/2016-11-23-011736.jpg" alt="Yarn version"></p>
<h3 id="首先得安装-Node-js"><a href="#首先得安装-Node-js" class="headerlink" title="首先得安装 Node.js"></a>首先得安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a></h3><h3 id="最简单的通过脚本安装"><a href="#最简单的通过脚本安装" class="headerlink" title="最简单的通过脚本安装"></a>最简单的通过脚本安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- -L https://yarnpkg.com/install.sh | bash</span><br></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/65e4f1e6gw1f8ql5fz45bj20fu04rq56.jpg" alt="QQ20161013-0.png"></p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install --global yarn</span><br></pre></td></tr></table></figure>

<h3 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h3><p>You can install Yarn by <a href="https://yarnpkg.com/latest.tar.gz" target="_blank" rel="noopener">downloading a tarball</a> and extracting it anywhere.<br><strong><em>OR</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install wget first</span></span><br><span class="line">$ <span class="built_in">cd</span> /opt</span><br><span class="line">$ wget https://yarnpkg.com/latest.tar.gz</span><br><span class="line">$ tar zvxf yarn-*.tar.gz</span><br><span class="line"><span class="comment"># Yarn is now in /opt/yarn-[version]/</span></span><br></pre></td></tr></table></figure>

<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn --version</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/65e4f1e6gw1f8ql84cm8fj208x00q0ss.jpg" alt="13:42:18.jpg"></p>
<h3 id="Uninstall"><a href="#Uninstall" class="headerlink" title="Uninstall"></a>Uninstall</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf ~/.yarn</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://yarnpkg.com/en/docs/install" target="_blank" rel="noopener">Yarn Installation</a></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>Yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn Usage</title>
    <url>/2016/10/13/yarn-usage/</url>
    <content><![CDATA[<h3 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn init</span><br></pre></td></tr></table></figure>

<h3 id="添加依赖包"><a href="#添加依赖包" class="headerlink" title="添加依赖包"></a>添加依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn add [package]</span><br><span class="line">$ yarn add [package]@[version]</span><br><span class="line">$ yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn upgrade [package]</span><br><span class="line">$ yarn upgrade [package]@[version]</span><br><span class="line">$ yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>

<h3 id="移除依赖包"><a href="#移除依赖包" class="headerlink" title="移除依赖包"></a>移除依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn remove [package]</span><br></pre></td></tr></table></figure>

<h3 id="安装项目的所有依赖包"><a href="#安装项目的所有依赖包" class="headerlink" title="安装项目的所有依赖包"></a>安装项目的所有依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn</span><br></pre></td></tr></table></figure>
<p><strong><em>or</em></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yarn install</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://yarnpkg.com/en/docs/usage" target="_blank" rel="noopener">Yarn Usage</a></p>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Tools</category>
        <category>Yarn</category>
      </categories>
      <tags>
        <tag>yarn</tag>
      </tags>
  </entry>
</search>
